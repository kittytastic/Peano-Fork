Packed-Type: short int;


class multigrid::records::Vertex {  
  /**
   * Solution
   */
  persistent parallelise double  u;

  /**
   * Rhs
   */
  persistent parallelise double  f;
  
  /**
   * Residual
   */
  persistent parallelise double   r;

  /**
   * Diagonal element
   */
  persistent parallelise double   d;
  
  enum VertexType {
    Unknown, Dirichlet, Neumann
  };
  
  persistent VertexType vertexType;

  /**
   * Additive multigrid/BPX
   * ======================
   *
   * Solution in hierarchical representation
   */
  persistent parallelise double  uHierarchical;
  
  /**
   * Additive multigrid/BPX
   * ======================
   *
   * Residual in hierarchical representation
   */
  persistent parallelise double   rHierarchical;

  /**
   * Additive multigrid/BPX
   * ======================
   *
   * Solution update due to the smoother on the particular level.
   * Therefore we use an s. 
   * Throughout the steps down, this guy then also holds the coarse 
   * grid contributions. We therefore use c as second letter.
   */
  persistent parallelise double  sc;

  /**
   * Additive multigrid/BPX
   * ======================
   *
   * Accumulation of fine grid updates due to the smoother. We 
   * therefore use s(moother)f(iner grids)
   */
  persistent parallelise double  sf;

  /**
   * Additive multigrid/BPX
   * ======================
   *
   * Injected value
   */
  persistent parallelise double  si;


  /**
   * BoxMG
   * =====
   */
  persistent int  mgStencilPointer;
};

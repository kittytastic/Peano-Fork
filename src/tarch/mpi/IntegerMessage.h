#ifndef _TARCH_MPI_INTEGERMESSAGE_H
#define _TARCH_MPI_INTEGERMESSAGE_H

#include "mpi.h"
#include "config.h"
#include "peano4/utils/Globals.h"
#ifdef Parallel
	#include "tarch/mpi/Rank.h"
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace tarch {
   namespace mpi {
      class IntegerMessage;
      class IntegerMessagePacked;
   }
}

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   13/03/2020 13:12
 */
class tarch::mpi::IntegerMessage { 
   
   public:
      
      typedef tarch::mpi::IntegerMessagePacked Packed;
      
      struct PersistentRecords {
         /**
          * Generated
          */
         PersistentRecords();
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         public:

         int _value;
         private:

         
      public:
         /**
          * Generated
          */
         IntegerMessage();
         
         /**
          * Generated
          */
         IntegerMessage(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         IntegerMessage(const int& value);
         
         /**
          * Generated
          */
         virtual ~IntegerMessage();
         
         /**
          * Generated
          */
          int getValue() const ;
         
         /**
          * Generated
          */
          void setValue(const int& value) ;
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         IntegerMessagePacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   13/03/2020 13:12
 */
class tarch::mpi::IntegerMessagePacked { 
   
   public:
      
      struct PersistentRecords {
         /**
          * Generated
          */
         PersistentRecords();
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         int _value;
         
      public:
         /**
          * Generated
          */
         IntegerMessagePacked();
         
         /**
          * Generated
          */
         IntegerMessagePacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         IntegerMessagePacked(const int& value);
         
         /**
          * Generated
          */
         virtual ~IntegerMessagePacked();
         
         /**
          * Generated
          */
          int getValue() const ;
         
         /**
          * Generated
          */
          void setValue(const int& value) ;
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         IntegerMessage convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

#endif


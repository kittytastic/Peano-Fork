#include "peano4/utils/Loop.h"

#include <random>


namespace {
  std::random_device rd;
  std::mt19937 e2(rd());
  std::uniform_real_distribution<> randomDist(0, 1);
}



template <class T>
void toolbox::particles::init(
  T&                                          particle,
  const tarch::la::Vector<Dimensions,double>& x,
  double                                      cutOffRadius
) {
  #if PeanoDebug>0
  particle.setDebugX( x );
  particle.setDebugH( 0.0 );
  #endif

  particle.setX(x);
  particle.setCutOffRadius( cutOffRadius );
  particle.setMoveState( T::MoveState::New );

  particle.setParallelState(T::ParallelState::Halo);
  particle.setNewParallelState(T::NewParallelState::Halo);
}


template <class T>
std::vector<T*> toolbox::particles::createEquallySpacedParticles(double spacing, const tarch::la::Vector<Dimensions,double>& voxelX, const tarch::la::Vector<Dimensions,double>& voxelH, bool roundDown, bool addNoise) {
  std::vector<T*> result;

  double continuousParticlesPerAxis = voxelH(0) / spacing;
  int    particlesPerAxis           = static_cast<int>( std::round(continuousParticlesPerAxis) );
  continuousParticlesPerAxis -= particlesPerAxis;
  assertion(continuousParticlesPerAxis>=0.0);
  assertion(continuousParticlesPerAxis<=1.0);
  double randomDraw = randomDist(e2);
  if (not roundDown and randomDraw<continuousParticlesPerAxis) {
    particlesPerAxis++;
  }

  if (particlesPerAxis>0) {
    const double particleSpacing = voxelH(0)/particlesPerAxis;

    const tarch::la::Vector<Dimensions,double> offset = voxelX - voxelH/2.0 + 0.5*tarch::la::Vector<Dimensions,double>(particleSpacing);

    dfor(k, particlesPerAxis) {
      tarch::la::Vector<Dimensions,double> x = offset + particleSpacing * tarch::la::convertScalar<double>(k);
      T* newParticle = new T();

      if (addNoise) {
        for (int d=0; d<Dimensions; d++) {
          x(d) += (randomDist(e2) - 0.5) * particleSpacing;
        }
      }

      init(*newParticle,x,0.9*tarch::la::min(voxelH));
      result.push_back(newParticle);
    }
  }

  return result;
}

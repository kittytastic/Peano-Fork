#ifndef _PEANO4_GRID_GRIDCONTROLEVENT_H
#define _PEANO4_GRID_GRIDCONTROLEVENT_H

#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peano4 {
   namespace grid {
      class GridControlEvent;
      class GridControlEventPacked;
   }
}

#if !defined(PeanoDebug)
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 09-02-2014 14:40
    *
    * @date   29/12/2018 16:06
    */
   class peano4::grid::GridControlEvent { 
      
      public:
         
         typedef peano4::grid::GridControlEventPacked Packed;
         
         enum RefinementControl {
            Refine = 0, Erase = 1, Keep = 2
         };
         
         struct PersistentRecords {
            RefinementControl _refinementControl;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const RefinementControl& refinementControl);
            
            /**
             * Generated
             */
             RefinementControl getRefinementControl() const ;
            
            /**
             * Generated
             */
             void setRefinementControl(const RefinementControl& refinementControl) ;
            
            
         };
         private: 
            PersistentRecords _persistentRecords;
            
         public:
            /**
             * Generated
             */
            GridControlEvent();
            
            /**
             * Generated
             */
            GridControlEvent(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            GridControlEvent(const RefinementControl& refinementControl);
            
            /**
             * Generated
             */
            virtual ~GridControlEvent();
            
            /**
             * Generated
             */
             RefinementControl getRefinementControl() const ;
            
            /**
             * Generated
             */
             void setRefinementControl(const RefinementControl& refinementControl) ;
            
            /**
             * Generated
             */
            static std::string toString(const RefinementControl& param);
            
            /**
             * Generated
             */
            static std::string getRefinementControlMapping();
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            GridControlEventPacked convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderDestinationRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                * There are two variants: Datatype identifies only those attributes marked with
                * parallelise. FullDatatype instead identifies the whole record with all fields.
                */
               static MPI_Datatype Datatype;
               static MPI_Datatype FullDatatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
               
               void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
               
               int getSenderRank() const;
               #endif
      
   };
   
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 09-02-2014 14:40
    *
    * @date   29/12/2018 16:06
    */
   class peano4::grid::GridControlEventPacked { 
      
      public:
         
         typedef peano4::grid::GridControlEvent::RefinementControl RefinementControl;
         
         struct PersistentRecords {
            RefinementControl _refinementControl;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const RefinementControl& refinementControl);
            
            /**
             * Generated
             */
             RefinementControl getRefinementControl() const ;
            
            /**
             * Generated
             */
             void setRefinementControl(const RefinementControl& refinementControl) ;
            
            
         };
         private: 
            PersistentRecords _persistentRecords;
            
         public:
            /**
             * Generated
             */
            GridControlEventPacked();
            
            /**
             * Generated
             */
            GridControlEventPacked(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            GridControlEventPacked(const RefinementControl& refinementControl);
            
            /**
             * Generated
             */
            virtual ~GridControlEventPacked();
            
            /**
             * Generated
             */
             RefinementControl getRefinementControl() const ;
            
            /**
             * Generated
             */
             void setRefinementControl(const RefinementControl& refinementControl) ;
            
            /**
             * Generated
             */
            static std::string toString(const RefinementControl& param);
            
            /**
             * Generated
             */
            static std::string getRefinementControlMapping();
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            GridControlEvent convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderDestinationRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                * There are two variants: Datatype identifies only those attributes marked with
                * parallelise. FullDatatype instead identifies the whole record with all fields.
                */
               static MPI_Datatype Datatype;
               static MPI_Datatype FullDatatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
               
               void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
               
               int getSenderRank() const;
               #endif
      
   };
   
   #elif defined(PeanoDebug)
      /**
       * @author This class is generated by DaStGen
       * 		   DataStructureGenerator (DaStGen)
       * 		   2007-2009 Wolfgang Eckhardt
       * 		   2012      Tobias Weinzierl
       *
       * 		   build date: 09-02-2014 14:40
       *
       * @date   29/12/2018 16:06
       */
      class peano4::grid::GridControlEvent { 
         
         public:
            
            typedef peano4::grid::GridControlEventPacked Packed;
            
            enum RefinementControl {
               Refine = 0, Erase = 1, Keep = 2
            };
            
            struct PersistentRecords {
               RefinementControl _refinementControl;
               int _level;
               tarch::la::Vector<Dimensions,double> _x;
               tarch::la::Vector<Dimensions,double> _h;
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const RefinementControl& refinementControl, const int& level, const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h);
               
               /**
                * Generated
                */
                RefinementControl getRefinementControl() const ;
               
               /**
                * Generated
                */
                void setRefinementControl(const RefinementControl& refinementControl) ;
               
               /**
                * Generated
                */
                int getLevel() const ;
               
               /**
                * Generated
                */
                void setLevel(const int& level) ;
               
                tarch::la::Vector<Dimensions,double> getX() const ;
               
                void setX(const tarch::la::Vector<Dimensions,double>& x) ;
               
                tarch::la::Vector<Dimensions,double> getH() const ;
               
                void setH(const tarch::la::Vector<Dimensions,double>& h) ;
               
               
            };
            private: 
               PersistentRecords _persistentRecords;
               
            public:
               /**
                * Generated
                */
               GridControlEvent();
               
               /**
                * Generated
                */
               GridControlEvent(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               GridControlEvent(const RefinementControl& refinementControl, const int& level, const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h);
               
               /**
                * Generated
                */
               virtual ~GridControlEvent();
               
               /**
                * Generated
                */
                RefinementControl getRefinementControl() const ;
               
               /**
                * Generated
                */
                void setRefinementControl(const RefinementControl& refinementControl) ;
               
               /**
                * Generated
                */
                int getLevel() const ;
               
               /**
                * Generated
                */
                void setLevel(const int& level) ;
               
                tarch::la::Vector<Dimensions,double> getX() const ;
               
                void setX(const tarch::la::Vector<Dimensions,double>& x) ;
               
                double getX(int elementIndex) const ;
               
                void setX(int elementIndex, const double& x) ;
               
                tarch::la::Vector<Dimensions,double> getH() const ;
               
                void setH(const tarch::la::Vector<Dimensions,double>& h) ;
               
                double getH(int elementIndex) const ;
               
                void setH(int elementIndex, const double& h) ;
               
               /**
                * Generated
                */
               static std::string toString(const RefinementControl& param);
               
               /**
                * Generated
                */
               static std::string getRefinementControlMapping();
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               GridControlEventPacked convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderDestinationRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   * There are two variants: Datatype identifies only those attributes marked with
                   * parallelise. FullDatatype instead identifies the whole record with all fields.
                   */
                  static MPI_Datatype Datatype;
                  static MPI_Datatype FullDatatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
                  
                  void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  int getSenderRank() const;
                  #endif
         
      };
      
      /**
       * @author This class is generated by DaStGen
       * 		   DataStructureGenerator (DaStGen)
       * 		   2007-2009 Wolfgang Eckhardt
       * 		   2012      Tobias Weinzierl
       *
       * 		   build date: 09-02-2014 14:40
       *
       * @date   29/12/2018 16:06
       */
      class peano4::grid::GridControlEventPacked { 
         
         public:
            
            typedef peano4::grid::GridControlEvent::RefinementControl RefinementControl;
            
            struct PersistentRecords {
               RefinementControl _refinementControl;
               int _level;
               tarch::la::Vector<Dimensions,double> _x;
               tarch::la::Vector<Dimensions,double> _h;
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const RefinementControl& refinementControl, const int& level, const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h);
               
               /**
                * Generated
                */
                RefinementControl getRefinementControl() const ;
               
               /**
                * Generated
                */
                void setRefinementControl(const RefinementControl& refinementControl) ;
               
               /**
                * Generated
                */
                int getLevel() const ;
               
               /**
                * Generated
                */
                void setLevel(const int& level) ;
               
                tarch::la::Vector<Dimensions,double> getX() const ;
               
                void setX(const tarch::la::Vector<Dimensions,double>& x) ;
               
                tarch::la::Vector<Dimensions,double> getH() const ;
               
                void setH(const tarch::la::Vector<Dimensions,double>& h) ;
               
               
            };
            private: 
               PersistentRecords _persistentRecords;
               
            public:
               /**
                * Generated
                */
               GridControlEventPacked();
               
               /**
                * Generated
                */
               GridControlEventPacked(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               GridControlEventPacked(const RefinementControl& refinementControl, const int& level, const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h);
               
               /**
                * Generated
                */
               virtual ~GridControlEventPacked();
               
               /**
                * Generated
                */
                RefinementControl getRefinementControl() const ;
               
               /**
                * Generated
                */
                void setRefinementControl(const RefinementControl& refinementControl) ;
               
               /**
                * Generated
                */
                int getLevel() const ;
               
               /**
                * Generated
                */
                void setLevel(const int& level) ;
               
                tarch::la::Vector<Dimensions,double> getX() const ;
               
                void setX(const tarch::la::Vector<Dimensions,double>& x) ;
               
                double getX(int elementIndex) const ;
               
                void setX(int elementIndex, const double& x) ;
               
                tarch::la::Vector<Dimensions,double> getH() const ;
               
                void setH(const tarch::la::Vector<Dimensions,double>& h) ;
               
                double getH(int elementIndex) const ;
               
                void setH(int elementIndex, const double& h) ;
               
               /**
                * Generated
                */
               static std::string toString(const RefinementControl& param);
               
               /**
                * Generated
                */
               static std::string getRefinementControlMapping();
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               GridControlEvent convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderDestinationRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   * There are two variants: Datatype identifies only those attributes marked with
                   * parallelise. FullDatatype instead identifies the whole record with all fields.
                   */
                  static MPI_Datatype Datatype;
                  static MPI_Datatype FullDatatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
                  
                  void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  int getSenderRank() const;
                  #endif
         
      };
      
      
   
#endif

#endif


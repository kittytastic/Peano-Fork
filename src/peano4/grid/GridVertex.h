#ifndef _PEANO4_GRIDVERTEX_H
#define _PEANO4_GRIDVERTEX_H

#include "peano/utils/Globals.h"
#include "tarch/compiler/CompilerSpecificSettings.h"
#include "peano/utils/PeanoOptimisations.h"
#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peano4 {
   class GridVertex;
   class GridVertexPacked;
}

#if defined(PEANO_DEBUG)
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 09-02-2014 14:40
    *
    * @date   18/11/2018 16:43
    */
   class peano4::GridVertex { 
      
      public:
         
         typedef peano4::GridVertexPacked Packed;
         
         enum State {
            HangingVertex = 0, Unrefined = 1, Refined = 2, RefinementTriggered = 3, Refining = 4, EraseTriggered = 5, Erasing = 6
         };
         
         struct PersistentRecords {
            State _state;
            int _adjacentRanks;
            tarch::la::Vector<DIMENSIONS,double> _x;
            int _level;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const State& state, const int& adjacentRanks, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
            
            /**
             * Generated
             */
             State getState() const ;
            
            /**
             * Generated
             */
             void setState(const State& state) ;
            
            /**
             * Generated
             */
             int getAdjacentRanks() const ;
            
            /**
             * Generated
             */
             void setAdjacentRanks(const int& adjacentRanks) ;
            
             tarch::la::Vector<DIMENSIONS,double> getX() const ;
            
             void setX(const tarch::la::Vector<DIMENSIONS,double>& x) ;
            
            /**
             * Generated
             */
             int getLevel() const ;
            
            /**
             * Generated
             */
             void setLevel(const int& level) ;
            
            
         };
         private: 
            PersistentRecords _persistentRecords;
            int _adjacentRanksOfPreviousIteration;
            
         public:
            /**
             * Generated
             */
            GridVertex();
            
            /**
             * Generated
             */
            GridVertex(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            GridVertex(const State& state, const int& adjacentRanks, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
            
            /**
             * Generated
             */
            GridVertex(const State& state, const int& adjacentRanks, const int& adjacentRanksOfPreviousIteration, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
            
            /**
             * Generated
             */
            virtual ~GridVertex();
            
            /**
             * Generated
             */
             State getState() const ;
            
            /**
             * Generated
             */
             void setState(const State& state) ;
            
            /**
             * Generated
             */
             int getAdjacentRanks() const ;
            
            /**
             * Generated
             */
             void setAdjacentRanks(const int& adjacentRanks) ;
            
            /**
             * Generated
             */
             int getAdjacentRanksOfPreviousIteration() const ;
            
            /**
             * Generated
             */
             void setAdjacentRanksOfPreviousIteration(const int& adjacentRanksOfPreviousIteration) ;
            
             tarch::la::Vector<DIMENSIONS,double> getX() const ;
            
             void setX(const tarch::la::Vector<DIMENSIONS,double>& x) ;
            
             double getX(int elementIndex) const ;
            
             void setX(int elementIndex, const double& x) ;
            
            /**
             * Generated
             */
             int getLevel() const ;
            
            /**
             * Generated
             */
             void setLevel(const int& level) ;
            
            /**
             * Generated
             */
            static std::string toString(const State& param);
            
            /**
             * Generated
             */
            static std::string getStateMapping();
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            GridVertexPacked convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderDestinationRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                * There are two variants: Datatype identifies only those attributes marked with
                * parallelise. FullDatatype instead identifies the whole record with all fields.
                */
               static MPI_Datatype Datatype;
               static MPI_Datatype FullDatatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
               
               void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
               
               int getSenderRank() const;
               #endif
      
   };
   
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 09-02-2014 14:40
    *
    * @date   18/11/2018 16:43
    */
   class peano4::GridVertexPacked { 
      
      public:
         
         typedef peano4::GridVertex::State State;
         
         struct PersistentRecords {
            int _adjacentRanks;
            tarch::la::Vector<DIMENSIONS,double> _x;
            int _level;
            
            /** mapping of records:
            || Member 	|| startbit 	|| length
             |  state	| startbit 0	| #bits 3
             */
            short int _packedRecords0;
            
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const State& state, const int& adjacentRanks, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
            
            /**
             * Generated
             */
             State getState() const ;
            
            /**
             * Generated
             */
             void setState(const State& state) ;
            
            /**
             * Generated
             */
             int getAdjacentRanks() const ;
            
            /**
             * Generated
             */
             void setAdjacentRanks(const int& adjacentRanks) ;
            
             tarch::la::Vector<DIMENSIONS,double> getX() const ;
            
             void setX(const tarch::la::Vector<DIMENSIONS,double>& x) ;
            
            /**
             * Generated
             */
             int getLevel() const ;
            
            /**
             * Generated
             */
             void setLevel(const int& level) ;
            
            
         };
         private: 
            PersistentRecords _persistentRecords;
            int _adjacentRanksOfPreviousIteration;
            
         public:
            /**
             * Generated
             */
            GridVertexPacked();
            
            /**
             * Generated
             */
            GridVertexPacked(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            GridVertexPacked(const State& state, const int& adjacentRanks, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
            
            /**
             * Generated
             */
            GridVertexPacked(const State& state, const int& adjacentRanks, const int& adjacentRanksOfPreviousIteration, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
            
            /**
             * Generated
             */
            virtual ~GridVertexPacked();
            
            /**
             * Generated
             */
             State getState() const ;
            
            /**
             * Generated
             */
             void setState(const State& state) ;
            
            /**
             * Generated
             */
             int getAdjacentRanks() const ;
            
            /**
             * Generated
             */
             void setAdjacentRanks(const int& adjacentRanks) ;
            
            /**
             * Generated
             */
             int getAdjacentRanksOfPreviousIteration() const ;
            
            /**
             * Generated
             */
             void setAdjacentRanksOfPreviousIteration(const int& adjacentRanksOfPreviousIteration) ;
            
             tarch::la::Vector<DIMENSIONS,double> getX() const ;
            
             void setX(const tarch::la::Vector<DIMENSIONS,double>& x) ;
            
             double getX(int elementIndex) const ;
            
             void setX(int elementIndex, const double& x) ;
            
            /**
             * Generated
             */
             int getLevel() const ;
            
            /**
             * Generated
             */
             void setLevel(const int& level) ;
            
            /**
             * Generated
             */
            static std::string toString(const State& param);
            
            /**
             * Generated
             */
            static std::string getStateMapping();
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            GridVertex convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderDestinationRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                * There are two variants: Datatype identifies only those attributes marked with
                * parallelise. FullDatatype instead identifies the whole record with all fields.
                */
               static MPI_Datatype Datatype;
               static MPI_Datatype FullDatatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
               
               void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
               
               static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
               
               int getSenderRank() const;
               #endif
      
   };
   
   #elif !defined(PEANO_DEBUG)
      /**
       * @author This class is generated by DaStGen
       * 		   DataStructureGenerator (DaStGen)
       * 		   2007-2009 Wolfgang Eckhardt
       * 		   2012      Tobias Weinzierl
       *
       * 		   build date: 09-02-2014 14:40
       *
       * @date   18/11/2018 16:43
       */
      class peano4::GridVertex { 
         
         public:
            
            typedef peano4::GridVertexPacked Packed;
            
            enum State {
               HangingVertex = 0, Unrefined = 1, Refined = 2, RefinementTriggered = 3, Refining = 4, EraseTriggered = 5, Erasing = 6
            };
            
            struct PersistentRecords {
               State _state;
               int _adjacentRanks;
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const State& state, const int& adjacentRanks);
               
               /**
                * Generated
                */
                State getState() const ;
               
               /**
                * Generated
                */
                void setState(const State& state) ;
               
               /**
                * Generated
                */
                int getAdjacentRanks() const ;
               
               /**
                * Generated
                */
                void setAdjacentRanks(const int& adjacentRanks) ;
               
               
            };
            private: 
               PersistentRecords _persistentRecords;
               int _adjacentRanksOfPreviousIteration;
               
            public:
               /**
                * Generated
                */
               GridVertex();
               
               /**
                * Generated
                */
               GridVertex(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               GridVertex(const State& state, const int& adjacentRanks);
               
               /**
                * Generated
                */
               GridVertex(const State& state, const int& adjacentRanks, const int& adjacentRanksOfPreviousIteration);
               
               /**
                * Generated
                */
               virtual ~GridVertex();
               
               /**
                * Generated
                */
                State getState() const ;
               
               /**
                * Generated
                */
                void setState(const State& state) ;
               
               /**
                * Generated
                */
                int getAdjacentRanks() const ;
               
               /**
                * Generated
                */
                void setAdjacentRanks(const int& adjacentRanks) ;
               
               /**
                * Generated
                */
                int getAdjacentRanksOfPreviousIteration() const ;
               
               /**
                * Generated
                */
                void setAdjacentRanksOfPreviousIteration(const int& adjacentRanksOfPreviousIteration) ;
               
               /**
                * Generated
                */
               static std::string toString(const State& param);
               
               /**
                * Generated
                */
               static std::string getStateMapping();
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               GridVertexPacked convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderDestinationRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   * There are two variants: Datatype identifies only those attributes marked with
                   * parallelise. FullDatatype instead identifies the whole record with all fields.
                   */
                  static MPI_Datatype Datatype;
                  static MPI_Datatype FullDatatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
                  
                  void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  int getSenderRank() const;
                  #endif
         
      };
      
      /**
       * @author This class is generated by DaStGen
       * 		   DataStructureGenerator (DaStGen)
       * 		   2007-2009 Wolfgang Eckhardt
       * 		   2012      Tobias Weinzierl
       *
       * 		   build date: 09-02-2014 14:40
       *
       * @date   18/11/2018 16:43
       */
      class peano4::GridVertexPacked { 
         
         public:
            
            typedef peano4::GridVertex::State State;
            
            struct PersistentRecords {
               int _adjacentRanks;
               
               /** mapping of records:
               || Member 	|| startbit 	|| length
                |  state	| startbit 0	| #bits 3
                */
               short int _packedRecords0;
               
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const State& state, const int& adjacentRanks);
               
               /**
                * Generated
                */
                State getState() const ;
               
               /**
                * Generated
                */
                void setState(const State& state) ;
               
               /**
                * Generated
                */
                int getAdjacentRanks() const ;
               
               /**
                * Generated
                */
                void setAdjacentRanks(const int& adjacentRanks) ;
               
               
            };
            private: 
               PersistentRecords _persistentRecords;
               int _adjacentRanksOfPreviousIteration;
               
            public:
               /**
                * Generated
                */
               GridVertexPacked();
               
               /**
                * Generated
                */
               GridVertexPacked(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               GridVertexPacked(const State& state, const int& adjacentRanks);
               
               /**
                * Generated
                */
               GridVertexPacked(const State& state, const int& adjacentRanks, const int& adjacentRanksOfPreviousIteration);
               
               /**
                * Generated
                */
               virtual ~GridVertexPacked();
               
               /**
                * Generated
                */
                State getState() const ;
               
               /**
                * Generated
                */
                void setState(const State& state) ;
               
               /**
                * Generated
                */
                int getAdjacentRanks() const ;
               
               /**
                * Generated
                */
                void setAdjacentRanks(const int& adjacentRanks) ;
               
               /**
                * Generated
                */
                int getAdjacentRanksOfPreviousIteration() const ;
               
               /**
                * Generated
                */
                void setAdjacentRanksOfPreviousIteration(const int& adjacentRanksOfPreviousIteration) ;
               
               /**
                * Generated
                */
               static std::string toString(const State& param);
               
               /**
                * Generated
                */
               static std::string getStateMapping();
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               GridVertex convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderDestinationRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   * There are two variants: Datatype identifies only those attributes marked with
                   * parallelise. FullDatatype instead identifies the whole record with all fields.
                   */
                  static MPI_Datatype Datatype;
                  static MPI_Datatype FullDatatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
                  
                  void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
                  
                  static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  int getSenderRank() const;
                  #endif
         
      };
      
      
   
#endif

#endif


#ifndef _PEANO4_GRID_GRIDTRAVERSALEVENT_H
#define _PEANO4_GRID_GRIDTRAVERSALEVENT_H

#include "peano4/utils/Globals.h"
#include "config.h"
#ifdef Parallel
	#include "tarch/mpi/Rank.h"
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peano4 {
   namespace grid {
      class GridTraversalEvent;
      class GridTraversalEventPacked;
   }
}

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   21/02/2020 08:11
 */
class peano4::grid::GridTraversalEvent { 
   
   public:
      
      typedef peano4::grid::GridTraversalEventPacked Packed;
      
      enum HorizontalDataExchange {
         None = 0, ForkMerge = 1, InterGridTransfer = 2
      };
      
      struct PersistentRecords {
         tarch::la::Vector<Dimensions,double> _x;
         tarch::la::Vector<Dimensions,double> _h;
         std::bitset<TwoPowerD> _isRefined;
         tarch::la::Vector<TwoPowerD,int> _vertexDataFrom;
         tarch::la::Vector<TwoPowerD,int> _vertexDataTo;
         tarch::la::Vector<TwoTimesD,int> _faceDataFrom;
         tarch::la::Vector<TwoTimesD,int> _faceDataTo;
         int _cellData;
         tarch::la::Vector<Dimensions,int> _relativePositionToFather;
         tarch::la::Vector<TwoPowerD,HorizontalDataExchange> _sendReceiveHorizontalVertexData;
         tarch::la::Vector<TwoTimesD,HorizontalDataExchange> _sendReceiveHorizontalFaceData;
         HorizontalDataExchange _sendReceiveHorizontalCellData;
         tarch::la::Vector<TwoPowerD,int> _sendReceiveHorizontalVertexDataRank;
         tarch::la::Vector<TwoTimesD,int> _sendReceiveHorizontalFaceDataRank;
         int _sendReceiveHorizontalCellDataRank;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const std::bitset<TwoPowerD>& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom, const tarch::la::Vector<TwoPowerD,int>& vertexDataTo, const tarch::la::Vector<TwoTimesD,int>& faceDataFrom, const tarch::la::Vector<TwoTimesD,int>& faceDataTo, const int& cellData, const tarch::la::Vector<Dimensions,int>& relativePositionToFather, const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData, const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData, const HorizontalDataExchange& sendReceiveHorizontalCellData, const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank, const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank, const int& sendReceiveHorizontalCellDataRank);
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
          std::bitset<TwoPowerD> getIsRefined() const ;
         
          void setIsRefined(const std::bitset<TwoPowerD>& isRefined) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataFrom() const ;
         
          void setVertexDataFrom(const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataTo() const ;
         
          void setVertexDataTo(const tarch::la::Vector<TwoPowerD,int>& vertexDataTo) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataFrom() const ;
         
          void setFaceDataFrom(const tarch::la::Vector<TwoTimesD,int>& faceDataFrom) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataTo() const ;
         
          void setFaceDataTo(const tarch::la::Vector<TwoTimesD,int>& faceDataTo) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
          tarch::la::Vector<Dimensions,int> getRelativePositionToFather() const ;
         
          void setRelativePositionToFather(const tarch::la::Vector<Dimensions,int>& relativePositionToFather) ;
         
          tarch::la::Vector<TwoPowerD,HorizontalDataExchange> getSendReceiveHorizontalVertexData() const ;
         
          void setSendReceiveHorizontalVertexData(const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData) ;
         
          tarch::la::Vector<TwoTimesD,HorizontalDataExchange> getSendReceiveHorizontalFaceData() const ;
         
          void setSendReceiveHorizontalFaceData(const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData) ;
         
         /**
          * Generated
          */
          HorizontalDataExchange getSendReceiveHorizontalCellData() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellData(const HorizontalDataExchange& sendReceiveHorizontalCellData) ;
         
          tarch::la::Vector<TwoPowerD,int> getSendReceiveHorizontalVertexDataRank() const ;
         
          void setSendReceiveHorizontalVertexDataRank(const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank) ;
         
          tarch::la::Vector<TwoTimesD,int> getSendReceiveHorizontalFaceDataRank() const ;
         
          void setSendReceiveHorizontalFaceDataRank(const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank) ;
         
         /**
          * Generated
          */
          int getSendReceiveHorizontalCellDataRank() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellDataRank(const int& sendReceiveHorizontalCellDataRank) ;
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         GridTraversalEvent();
         
         /**
          * Generated
          */
         GridTraversalEvent(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         GridTraversalEvent(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const std::bitset<TwoPowerD>& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom, const tarch::la::Vector<TwoPowerD,int>& vertexDataTo, const tarch::la::Vector<TwoTimesD,int>& faceDataFrom, const tarch::la::Vector<TwoTimesD,int>& faceDataTo, const int& cellData, const tarch::la::Vector<Dimensions,int>& relativePositionToFather, const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData, const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData, const HorizontalDataExchange& sendReceiveHorizontalCellData, const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank, const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank, const int& sendReceiveHorizontalCellDataRank);
         
         /**
          * Generated
          */
         virtual ~GridTraversalEvent();
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          double getX(int elementIndex) const ;
         
          void setX(int elementIndex, const double& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
          double getH(int elementIndex) const ;
         
          void setH(int elementIndex, const double& h) ;
         
          std::bitset<TwoPowerD> getIsRefined() const ;
         
          void setIsRefined(const std::bitset<TwoPowerD>& isRefined) ;
         
          bool getIsRefined(int elementIndex) const ;
         
          void setIsRefined(int elementIndex, const bool& isRefined) ;
         
          void flipIsRefined(int elementIndex) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataFrom() const ;
         
          void setVertexDataFrom(const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom) ;
         
          int getVertexDataFrom(int elementIndex) const ;
         
          void setVertexDataFrom(int elementIndex, const int& vertexDataFrom) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataTo() const ;
         
          void setVertexDataTo(const tarch::la::Vector<TwoPowerD,int>& vertexDataTo) ;
         
          int getVertexDataTo(int elementIndex) const ;
         
          void setVertexDataTo(int elementIndex, const int& vertexDataTo) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataFrom() const ;
         
          void setFaceDataFrom(const tarch::la::Vector<TwoTimesD,int>& faceDataFrom) ;
         
          int getFaceDataFrom(int elementIndex) const ;
         
          void setFaceDataFrom(int elementIndex, const int& faceDataFrom) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataTo() const ;
         
          void setFaceDataTo(const tarch::la::Vector<TwoTimesD,int>& faceDataTo) ;
         
          int getFaceDataTo(int elementIndex) const ;
         
          void setFaceDataTo(int elementIndex, const int& faceDataTo) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
          tarch::la::Vector<Dimensions,int> getRelativePositionToFather() const ;
         
          void setRelativePositionToFather(const tarch::la::Vector<Dimensions,int>& relativePositionToFather) ;
         
          int getRelativePositionToFather(int elementIndex) const ;
         
          void setRelativePositionToFather(int elementIndex, const int& relativePositionToFather) ;
         
          tarch::la::Vector<TwoPowerD,HorizontalDataExchange> getSendReceiveHorizontalVertexData() const ;
         
          void setSendReceiveHorizontalVertexData(const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData) ;
         
          peano4::grid::GridTraversalEvent::HorizontalDataExchange getSendReceiveHorizontalVertexData(int elementIndex) const ;
         
          void setSendReceiveHorizontalVertexData(int elementIndex, const HorizontalDataExchange& sendReceiveHorizontalVertexData) ;
         
          tarch::la::Vector<TwoTimesD,HorizontalDataExchange> getSendReceiveHorizontalFaceData() const ;
         
          void setSendReceiveHorizontalFaceData(const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData) ;
         
          peano4::grid::GridTraversalEvent::HorizontalDataExchange getSendReceiveHorizontalFaceData(int elementIndex) const ;
         
          void setSendReceiveHorizontalFaceData(int elementIndex, const HorizontalDataExchange& sendReceiveHorizontalFaceData) ;
         
         /**
          * Generated
          */
          HorizontalDataExchange getSendReceiveHorizontalCellData() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellData(const HorizontalDataExchange& sendReceiveHorizontalCellData) ;
         
          tarch::la::Vector<TwoPowerD,int> getSendReceiveHorizontalVertexDataRank() const ;
         
          void setSendReceiveHorizontalVertexDataRank(const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank) ;
         
          int getSendReceiveHorizontalVertexDataRank(int elementIndex) const ;
         
          void setSendReceiveHorizontalVertexDataRank(int elementIndex, const int& sendReceiveHorizontalVertexDataRank) ;
         
          tarch::la::Vector<TwoTimesD,int> getSendReceiveHorizontalFaceDataRank() const ;
         
          void setSendReceiveHorizontalFaceDataRank(const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank) ;
         
          int getSendReceiveHorizontalFaceDataRank(int elementIndex) const ;
         
          void setSendReceiveHorizontalFaceDataRank(int elementIndex, const int& sendReceiveHorizontalFaceDataRank) ;
         
         /**
          * Generated
          */
          int getSendReceiveHorizontalCellDataRank() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellDataRank(const int& sendReceiveHorizontalCellDataRank) ;
         
         /**
          * Generated
          */
         static std::string toString(const HorizontalDataExchange& param);
         
         /**
          * Generated
          */
         static std::string getHorizontalDataExchangeMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         GridTraversalEventPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   21/02/2020 08:11
 */
class peano4::grid::GridTraversalEventPacked { 
   
   public:
      
      typedef peano4::grid::GridTraversalEvent::HorizontalDataExchange HorizontalDataExchange;
      
      struct PersistentRecords {
         tarch::la::Vector<Dimensions,double> _x;
         tarch::la::Vector<Dimensions,double> _h;
         tarch::la::Vector<Dimensions,int> _relativePositionToFather;
         tarch::la::Vector<TwoPowerD,int> _sendReceiveHorizontalVertexDataRank;
         tarch::la::Vector<TwoTimesD,int> _sendReceiveHorizontalFaceDataRank;
         int _sendReceiveHorizontalCellDataRank;
         
         /** mapping of records:
         || Member 	|| startbit 	|| length
          |  isRefined	| startbit 0	| #bits TwoPowerD
          |  faceDataFrom	| startbit TwoPowerD + 0	| #bits 24
          |  faceDataTo	| startbit TwoPowerD + 24	| #bits 24
          */
         long int _packedRecords0;
         
         
         /** mapping of records:
         || Member 	|| startbit 	|| length
          |  vertexDataFrom	| startbit 0	| #bits 64
          */
         long int _packedRecords1;
         
         
         /** mapping of records:
         || Member 	|| startbit 	|| length
          |  vertexDataTo	| startbit 0	| #bits 64
          */
         long int _packedRecords2;
         
         
         /** mapping of records:
         || Member 	|| startbit 	|| length
          |  cellData	| startbit 0	| #bits 3
          |  sendReceiveHorizontalVertexData	| startbit 3	| #bits 32
          |  sendReceiveHorizontalFaceData	| startbit 35	| #bits 12
          |  sendReceiveHorizontalCellData	| startbit 47	| #bits 2
          */
         long int _packedRecords3;
         
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const std::bitset<TwoPowerD>& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom, const tarch::la::Vector<TwoPowerD,int>& vertexDataTo, const tarch::la::Vector<TwoTimesD,int>& faceDataFrom, const tarch::la::Vector<TwoTimesD,int>& faceDataTo, const int& cellData, const tarch::la::Vector<Dimensions,int>& relativePositionToFather, const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData, const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData, const HorizontalDataExchange& sendReceiveHorizontalCellData, const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank, const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank, const int& sendReceiveHorizontalCellDataRank);
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
          std::bitset<TwoPowerD> getIsRefined() const ;
         
          void setIsRefined(const std::bitset<TwoPowerD>& isRefined) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataFrom() const ;
         
          void setVertexDataFrom(const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataTo() const ;
         
          void setVertexDataTo(const tarch::la::Vector<TwoPowerD,int>& vertexDataTo) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataFrom() const ;
         
          void setFaceDataFrom(const tarch::la::Vector<TwoTimesD,int>& faceDataFrom) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataTo() const ;
         
          void setFaceDataTo(const tarch::la::Vector<TwoTimesD,int>& faceDataTo) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
          tarch::la::Vector<Dimensions,int> getRelativePositionToFather() const ;
         
          void setRelativePositionToFather(const tarch::la::Vector<Dimensions,int>& relativePositionToFather) ;
         
          tarch::la::Vector<TwoPowerD,HorizontalDataExchange> getSendReceiveHorizontalVertexData() const ;
         
          void setSendReceiveHorizontalVertexData(const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData) ;
         
          tarch::la::Vector<TwoTimesD,HorizontalDataExchange> getSendReceiveHorizontalFaceData() const ;
         
          void setSendReceiveHorizontalFaceData(const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData) ;
         
         /**
          * Generated
          */
          HorizontalDataExchange getSendReceiveHorizontalCellData() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellData(const HorizontalDataExchange& sendReceiveHorizontalCellData) ;
         
          tarch::la::Vector<TwoPowerD,int> getSendReceiveHorizontalVertexDataRank() const ;
         
          void setSendReceiveHorizontalVertexDataRank(const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank) ;
         
          tarch::la::Vector<TwoTimesD,int> getSendReceiveHorizontalFaceDataRank() const ;
         
          void setSendReceiveHorizontalFaceDataRank(const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank) ;
         
         /**
          * Generated
          */
          int getSendReceiveHorizontalCellDataRank() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellDataRank(const int& sendReceiveHorizontalCellDataRank) ;
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         GridTraversalEventPacked();
         
         /**
          * Generated
          */
         GridTraversalEventPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         GridTraversalEventPacked(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const std::bitset<TwoPowerD>& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom, const tarch::la::Vector<TwoPowerD,int>& vertexDataTo, const tarch::la::Vector<TwoTimesD,int>& faceDataFrom, const tarch::la::Vector<TwoTimesD,int>& faceDataTo, const int& cellData, const tarch::la::Vector<Dimensions,int>& relativePositionToFather, const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData, const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData, const HorizontalDataExchange& sendReceiveHorizontalCellData, const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank, const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank, const int& sendReceiveHorizontalCellDataRank);
         
         /**
          * Generated
          */
         virtual ~GridTraversalEventPacked();
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          double getX(int elementIndex) const ;
         
          void setX(int elementIndex, const double& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
          double getH(int elementIndex) const ;
         
          void setH(int elementIndex, const double& h) ;
         
          std::bitset<TwoPowerD> getIsRefined() const ;
         
          void setIsRefined(const std::bitset<TwoPowerD>& isRefined) ;
         
          bool getIsRefined(int elementIndex) const ;
         
          void setIsRefined(int elementIndex, const bool& isRefined) ;
         
          void flipIsRefined(int elementIndex) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataFrom() const ;
         
          void setVertexDataFrom(const tarch::la::Vector<TwoPowerD,int>& vertexDataFrom) ;
         
          int getVertexDataFrom(int elementIndex) const ;
         
          void setVertexDataFrom(int elementIndex, const int& vertexDataFrom) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexDataTo() const ;
         
          void setVertexDataTo(const tarch::la::Vector<TwoPowerD,int>& vertexDataTo) ;
         
          int getVertexDataTo(int elementIndex) const ;
         
          void setVertexDataTo(int elementIndex, const int& vertexDataTo) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataFrom() const ;
         
          void setFaceDataFrom(const tarch::la::Vector<TwoTimesD,int>& faceDataFrom) ;
         
          int getFaceDataFrom(int elementIndex) const ;
         
          void setFaceDataFrom(int elementIndex, const int& faceDataFrom) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceDataTo() const ;
         
          void setFaceDataTo(const tarch::la::Vector<TwoTimesD,int>& faceDataTo) ;
         
          int getFaceDataTo(int elementIndex) const ;
         
          void setFaceDataTo(int elementIndex, const int& faceDataTo) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
          tarch::la::Vector<Dimensions,int> getRelativePositionToFather() const ;
         
          void setRelativePositionToFather(const tarch::la::Vector<Dimensions,int>& relativePositionToFather) ;
         
          int getRelativePositionToFather(int elementIndex) const ;
         
          void setRelativePositionToFather(int elementIndex, const int& relativePositionToFather) ;
         
          tarch::la::Vector<TwoPowerD,HorizontalDataExchange> getSendReceiveHorizontalVertexData() const ;
         
          void setSendReceiveHorizontalVertexData(const tarch::la::Vector<TwoPowerD,HorizontalDataExchange>& sendReceiveHorizontalVertexData) ;
         
          peano4::grid::GridTraversalEvent::HorizontalDataExchange getSendReceiveHorizontalVertexData(int elementIndex) const ;
         
          void setSendReceiveHorizontalVertexData(int elementIndex, const HorizontalDataExchange& sendReceiveHorizontalVertexData) ;
         
          tarch::la::Vector<TwoTimesD,HorizontalDataExchange> getSendReceiveHorizontalFaceData() const ;
         
          void setSendReceiveHorizontalFaceData(const tarch::la::Vector<TwoTimesD,HorizontalDataExchange>& sendReceiveHorizontalFaceData) ;
         
          peano4::grid::GridTraversalEvent::HorizontalDataExchange getSendReceiveHorizontalFaceData(int elementIndex) const ;
         
          void setSendReceiveHorizontalFaceData(int elementIndex, const HorizontalDataExchange& sendReceiveHorizontalFaceData) ;
         
         /**
          * Generated
          */
          HorizontalDataExchange getSendReceiveHorizontalCellData() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellData(const HorizontalDataExchange& sendReceiveHorizontalCellData) ;
         
          tarch::la::Vector<TwoPowerD,int> getSendReceiveHorizontalVertexDataRank() const ;
         
          void setSendReceiveHorizontalVertexDataRank(const tarch::la::Vector<TwoPowerD,int>& sendReceiveHorizontalVertexDataRank) ;
         
          int getSendReceiveHorizontalVertexDataRank(int elementIndex) const ;
         
          void setSendReceiveHorizontalVertexDataRank(int elementIndex, const int& sendReceiveHorizontalVertexDataRank) ;
         
          tarch::la::Vector<TwoTimesD,int> getSendReceiveHorizontalFaceDataRank() const ;
         
          void setSendReceiveHorizontalFaceDataRank(const tarch::la::Vector<TwoTimesD,int>& sendReceiveHorizontalFaceDataRank) ;
         
          int getSendReceiveHorizontalFaceDataRank(int elementIndex) const ;
         
          void setSendReceiveHorizontalFaceDataRank(int elementIndex, const int& sendReceiveHorizontalFaceDataRank) ;
         
         /**
          * Generated
          */
          int getSendReceiveHorizontalCellDataRank() const ;
         
         /**
          * Generated
          */
          void setSendReceiveHorizontalCellDataRank(const int& sendReceiveHorizontalCellDataRank) ;
         
         /**
          * Generated
          */
         static std::string toString(const HorizontalDataExchange& param);
         
         /**
          * Generated
          */
         static std::string getHorizontalDataExchangeMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         GridTraversalEvent convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

#endif


#ifndef _PEANO4_GRID_GRIDTRAVERSALEVENT_H
#define _PEANO4_GRID_GRIDTRAVERSALEVENT_H

#include "peano4/utils/Globals.h"
#include "config.h"
#ifdef Parallel
	#include "tarch/mpi/Rank.h"
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peano4 {
   namespace grid {
      class GridTraversalEvent;
      class GridTraversalEventPacked;
   }
}

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   20/01/2019 11:10
 */
class peano4::grid::GridTraversalEvent { 
   
   public:
      
      typedef peano4::grid::GridTraversalEventPacked Packed;
      
      enum RefinementControl {
         Enter = 0, Leave = 1
      };
      
      struct PersistentRecords {
         tarch::la::Vector<Dimensions,double> _x;
         tarch::la::Vector<Dimensions,double> _h;
         bool _isRefined;
         tarch::la::Vector<TwoPowerD,int> _vertexData;
         tarch::la::Vector<TwoTimesD,int> _faceData;
         int _cellData;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const bool& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexData, const tarch::la::Vector<TwoTimesD,int>& faceData, const int& cellData);
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
         /**
          * Generated
          */
          bool getIsRefined() const ;
         
         /**
          * Generated
          */
          void setIsRefined(const bool& isRefined) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexData() const ;
         
          void setVertexData(const tarch::la::Vector<TwoPowerD,int>& vertexData) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceData() const ;
         
          void setFaceData(const tarch::la::Vector<TwoTimesD,int>& faceData) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         GridTraversalEvent();
         
         /**
          * Generated
          */
         GridTraversalEvent(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         GridTraversalEvent(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const bool& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexData, const tarch::la::Vector<TwoTimesD,int>& faceData, const int& cellData);
         
         /**
          * Generated
          */
         virtual ~GridTraversalEvent();
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          double getX(int elementIndex) const ;
         
          void setX(int elementIndex, const double& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
          double getH(int elementIndex) const ;
         
          void setH(int elementIndex, const double& h) ;
         
         /**
          * Generated
          */
          bool getIsRefined() const ;
         
         /**
          * Generated
          */
          void setIsRefined(const bool& isRefined) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexData() const ;
         
          void setVertexData(const tarch::la::Vector<TwoPowerD,int>& vertexData) ;
         
          int getVertexData(int elementIndex) const ;
         
          void setVertexData(int elementIndex, const int& vertexData) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceData() const ;
         
          void setFaceData(const tarch::la::Vector<TwoTimesD,int>& faceData) ;
         
          int getFaceData(int elementIndex) const ;
         
          void setFaceData(int elementIndex, const int& faceData) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
         /**
          * Generated
          */
         static std::string toString(const RefinementControl& param);
         
         /**
          * Generated
          */
         static std::string getRefinementControlMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         GridTraversalEventPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   20/01/2019 11:10
 */
class peano4::grid::GridTraversalEventPacked { 
   
   public:
      
      typedef peano4::grid::GridTraversalEvent::RefinementControl RefinementControl;
      
      struct PersistentRecords {
         tarch::la::Vector<Dimensions,double> _x;
         tarch::la::Vector<Dimensions,double> _h;
         
         /** mapping of records:
         || Member 	|| startbit 	|| length
          |  isRefined	| startbit 0	| #bits 1
          |  faceData	| startbit 1	| #bits 18
          |  cellData	| startbit 19	| #bits 1
          */
         long int _packedRecords0;
         
         
         /** mapping of records:
         || Member 	|| startbit 	|| length
          |  vertexData	| startbit 0	| #bits 64
          */
         long int _packedRecords1;
         
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const bool& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexData, const tarch::la::Vector<TwoTimesD,int>& faceData, const int& cellData);
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
         /**
          * Generated
          */
          bool getIsRefined() const ;
         
         /**
          * Generated
          */
          void setIsRefined(const bool& isRefined) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexData() const ;
         
          void setVertexData(const tarch::la::Vector<TwoPowerD,int>& vertexData) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceData() const ;
         
          void setFaceData(const tarch::la::Vector<TwoTimesD,int>& faceData) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         GridTraversalEventPacked();
         
         /**
          * Generated
          */
         GridTraversalEventPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         GridTraversalEventPacked(const tarch::la::Vector<Dimensions,double>& x, const tarch::la::Vector<Dimensions,double>& h, const bool& isRefined, const tarch::la::Vector<TwoPowerD,int>& vertexData, const tarch::la::Vector<TwoTimesD,int>& faceData, const int& cellData);
         
         /**
          * Generated
          */
         virtual ~GridTraversalEventPacked();
         
          tarch::la::Vector<Dimensions,double> getX() const ;
         
          void setX(const tarch::la::Vector<Dimensions,double>& x) ;
         
          double getX(int elementIndex) const ;
         
          void setX(int elementIndex, const double& x) ;
         
          tarch::la::Vector<Dimensions,double> getH() const ;
         
          void setH(const tarch::la::Vector<Dimensions,double>& h) ;
         
          double getH(int elementIndex) const ;
         
          void setH(int elementIndex, const double& h) ;
         
         /**
          * Generated
          */
          bool getIsRefined() const ;
         
         /**
          * Generated
          */
          void setIsRefined(const bool& isRefined) ;
         
          tarch::la::Vector<TwoPowerD,int> getVertexData() const ;
         
          void setVertexData(const tarch::la::Vector<TwoPowerD,int>& vertexData) ;
         
          int getVertexData(int elementIndex) const ;
         
          void setVertexData(int elementIndex, const int& vertexData) ;
         
          tarch::la::Vector<TwoTimesD,int> getFaceData() const ;
         
          void setFaceData(const tarch::la::Vector<TwoTimesD,int>& faceData) ;
         
          int getFaceData(int elementIndex) const ;
         
          void setFaceData(int elementIndex, const int& faceData) ;
         
         /**
          * Generated
          */
          int getCellData() const ;
         
         /**
          * Generated
          */
          void setCellData(const int& cellData) ;
         
         /**
          * Generated
          */
         static std::string toString(const RefinementControl& param);
         
         /**
          * Generated
          */
         static std::string getRefinementControlMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         GridTraversalEvent convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

#endif


#ifndef _PEANO4_PARALLEL_TREEENTRY_H
#define _PEANO4_PARALLEL_TREEENTRY_H

#include "peano4/utils/Globals.h"
#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peano4 {
   namespace parallel {
      class TreeEntry;
      class TreeEntryPacked;
   }
}

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   08/01/2019 21:09
 */
class peano4::parallel::TreeEntry { 
   
   public:
      
      typedef peano4::parallel::TreeEntryPacked Packed;
      
      struct PersistentRecords {
         int _id;
         int _master;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const int& id, const int& master);
         
         /**
          * Generated
          */
          int getId() const ;
         
         /**
          * Generated
          */
          void setId(const int& id) ;
         
         /**
          * Generated
          */
          int getMaster() const ;
         
         /**
          * Generated
          */
          void setMaster(const int& master) ;
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         TreeEntry();
         
         /**
          * Generated
          */
         TreeEntry(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         TreeEntry(const int& id, const int& master);
         
         /**
          * Generated
          */
         virtual ~TreeEntry();
         
         /**
          * Generated
          */
          int getId() const ;
         
         /**
          * Generated
          */
          void setId(const int& id) ;
         
         /**
          * Generated
          */
          int getMaster() const ;
         
         /**
          * Generated
          */
          void setMaster(const int& master) ;
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         TreeEntryPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 09-02-2014 14:40
 *
 * @date   08/01/2019 21:09
 */
class peano4::parallel::TreeEntryPacked { 
   
   public:
      
      struct PersistentRecords {
         int _id;
         int _master;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const int& id, const int& master);
         
         /**
          * Generated
          */
          int getId() const ;
         
         /**
          * Generated
          */
          void setId(const int& id) ;
         
         /**
          * Generated
          */
          int getMaster() const ;
         
         /**
          * Generated
          */
          void setMaster(const int& master) ;
         
         
      };
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         TreeEntryPacked();
         
         /**
          * Generated
          */
         TreeEntryPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         TreeEntryPacked(const int& id, const int& master);
         
         /**
          * Generated
          */
         virtual ~TreeEntryPacked();
         
         /**
          * Generated
          */
          int getId() const ;
         
         /**
          * Generated
          */
          void setId(const int& id) ;
         
         /**
          * Generated
          */
          int getMaster() const ;
         
         /**
          * Generated
          */
          void setMaster(const int& master) ;
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         TreeEntry convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            enum class ExchangeMode { Blocking, NonblockingWithPollingLoopOverTests, LoopOverProbeWithBlockingReceive };
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, ExchangeMode mode );
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            #endif
   
};

#endif


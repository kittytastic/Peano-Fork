#
# Peano4 Makefile
# Generated by Peano's Python API
#
.PHONY: all solver clean


CXX = icpx
FC  = gfortran
DIMENSIONS = 2


CXXFLAGS += -I. -I../..//src -std=c++17 -O3 -qopenmp -g3 -DDimensions=2 -DPeanoDebug=0
LDFLAGS  += -L/home/jack/dis/newPeano/Peano/src  -L/home/jack/dis/newPeano/Peano/src/toolbox/loadbalancing  -L/home/jack/dis/newPeano/Peano/src/toolbox/blockstructured  -L/home/jack/dis/newPeano/Peano/src/exahype2  
LIBS +=  -L../..//src -lExaHyPE2Core2d          -lToolboxBlockstructured2d          -lToolboxLoadBalancing2d          -lPeano4Core2d         -lTarch





















FCFLAGS  += 

GPU_OBJS = 

CXX_SOURCES=Abstracteuler2D.cpp euler2D.cpp repositories/SolverRepository.cpp celldata/euler2DCellLabel.cpp celldata/euler2DQ.cpp facedata/euler2DQOld.cpp facedata/euler2DQNew.cpp facedata/euler2DQUpdate.cpp facedata/euler2DFaceLabel.cpp repositories/DataRepository.cpp ./observers/CreateGrid2exahype2_solvers_fv_actionsets_InitialCondition0.cpp ./observers/CreateGrid2exahype2_grid_FaceLabel1.cpp ./observers/CreateGrid2exahype2_grid_CellLabel2.cpp ./observers/CreateGrid2exahype2_solvers_fv_actionsets_AdaptivityCriterion3.cpp ./observers/CreateGrid.cpp ./observers/InitGrid2exahype2_solvers_fv_actionsets_DynamicAMR0.cpp ./observers/InitGrid2peano4_toolbox_blockstructured_BackupPatchOverlap1.cpp ./observers/InitGrid2exahype2_solvers_fv_actionsets_RollOverUpdatedFace2.cpp ./observers/InitGrid2exahype2_solvers_fv_actionsets_InitialCondition3.cpp ./observers/InitGrid2exahype2_solvers_fv_actionsets_ProjectPatchOntoFaces4.cpp ./observers/InitGrid2exahype2_grid_FaceLabel5.cpp ./observers/InitGrid2exahype2_grid_CellLabel6.cpp ./observers/InitGrid.cpp ./observers/CreateGridButPostponeRefinement2exahype2_solvers_fv_actionsets_InitialCondition0.cpp ./observers/CreateGridButPostponeRefinement2exahype2_grid_FaceLabel1.cpp ./observers/CreateGridButPostponeRefinement2exahype2_grid_CellLabel2.cpp ./observers/CreateGridButPostponeRefinement2exahype2_solvers_fv_actionsets_AdaptivityCriterion3.cpp ./observers/CreateGridButPostponeRefinement.cpp ./observers/CreateGridAndConvergeLoadBalancing2exahype2_solvers_fv_actionsets_InitialCondition0.cpp ./observers/CreateGridAndConvergeLoadBalancing2exahype2_grid_FaceLabel1.cpp ./observers/CreateGridAndConvergeLoadBalancing2exahype2_grid_CellLabel2.cpp ./observers/CreateGridAndConvergeLoadBalancing2exahype2_solvers_fv_actionsets_AdaptivityCriterion3.cpp ./observers/CreateGridAndConvergeLoadBalancing.cpp ./observers/PlotSolution2exahype2_solvers_fv_actionsets_DynamicAMR0.cpp ./observers/PlotSolution2exahype2_solvers_fv_actionsets_RollOverUpdatedFace1.cpp ./observers/PlotSolution2exahype2_grid_FaceLabel2.cpp ./observers/PlotSolution2exahype2_grid_CellLabel3.cpp ./observers/PlotSolution2exahype2_solvers_fv_actionsets_ProjectPatchOntoFaces4.cpp ./observers/PlotSolution2exahype2_solvers_fv_actionsets_AdaptivityCriterion5.cpp ./observers/PlotSolution2peano4_toolbox_blockstructured_PlotPatchesInPeanoBlockFormat6.cpp ./observers/PlotSolution.cpp ./observers/TimeStep2exahype2_solvers_fv_actionsets_DynamicAMR0.cpp ./observers/TimeStep2exahype2_solvers_fv_actionsets_RollOverUpdatedFace1.cpp ./observers/TimeStep2exahype2_grid_FaceLabel2.cpp ./observers/TimeStep2exahype2_grid_CellLabel3.cpp ./observers/TimeStep2exahype2_solvers_fv_actionsets_HandleBoundary4.cpp ./observers/TimeStep2peano4_toolbox_blockstructured_ReconstructPatchAndApplyFunctor5.cpp ./observers/TimeStep2exahype2_solvers_fv_actionsets_ProjectPatchOntoFaces6.cpp ./observers/TimeStep2exahype2_solvers_fv_actionsets_AdaptivityCriterion7.cpp ./observers/TimeStep.cpp repositories/StepRepository.cpp euler2D-main.cpp  
FORTRAN_SOURCES=


CXX_OBJS=$(subst .cpp,.o,$(CXX_SOURCES))
FORTRAN_OBJS=$(subst .f,.o,$(subst .f90,.o,$(FORTRAN_SOURCES)))
FORTRAN_MODULE_OBJS=

all: solver


%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<


%.o: %.f90
	$(FC) $(FCFLAGS) -c -o $@ $<

    




#
# Linker arguments are read from left to right and objects are thrown away
# per step if they are not required anymore. That is: left libraries can
# depend objects right but not the other way round.
#
solver:  $(CXX_OBJS) $(FORTRAN_OBJS)
	$(CXX) $(FORTRAN_MODULE_OBJS) $(FORTRAN_OBJS) $(CXX_OBJS) $(LDFLAGS) $(GPU_OBJS) $(LIBS) -o Euler2D 

    
clean:
	rm -f $(CXX_OBJS) $(FORTRAN_OBJS) $(FORTRAN_MODULE_OBJS)
	rm -f *.mod
	rm -f Euler2D

//
// Generated by DaStGen2 (C) 2020 Tobias Weinzierl
//
// For DaStGen's copyright, visit www.peano-framework.org. These generated files
// however are not subject of copyright, i.e. feel free to add your copyright in 
// here
//  
#ifndef _INCLUDE_PROJECT_BASE_2D_EULER_CELLDATA_EULER2DCELLLABEL_
#define _INCLUDE_PROJECT_BASE_2D_EULER_CELLDATA_EULER2DCELLLABEL_

#include <string>
  

#ifdef Parallel
  #include <mpi.h>
  #include <functional>
#endif


#include "tarch/la/Vector.h"
#include "tarch/mpi/Rank.h"
#include "tarch/services/ServiceRepository.h"
#include "peano4/utils/Globals.h"

#include "peano4/datamanagement/CellMarker.h"
#include "peano4/datamanagement/FaceMarker.h"
#include "peano4/datamanagement/VertexMarker.h"


  
namespace project{
namespace base_2d_euler{
namespace celldata{

  struct euler2DCellLabel;
}
}
}



struct project::base_2d_euler::celldata::euler2DCellLabel {
  public:


    euler2DCellLabel() {}
    euler2DCellLabel(tarch::la::Vector<Dimensions,double>  __debugX, tarch::la::Vector<Dimensions,double>  __debugH, int  __SemaphoreNumber, double  __TimeStamp, double  __TimeStepSize, bool  __HasUpdated);

    tarch::la::Vector<Dimensions,double>   getDebugX() const;
    void   setDebugX(const tarch::la::Vector<Dimensions,double>& value);
    double   getDebugX(int index) const;
    void   setDebugX(int index, double value);
    tarch::la::Vector<Dimensions,double>   getDebugH() const;
    void   setDebugH(const tarch::la::Vector<Dimensions,double>& value);
    double   getDebugH(int index) const;
    void   setDebugH(int index, double value);
    int   getSemaphoreNumber() const;
    void   setSemaphoreNumber(int value);
    double   getTimeStamp() const;
    void   setTimeStamp(double value);
    double   getTimeStepSize() const;
    void   setTimeStepSize(double value);
    bool   getHasUpdated() const;
    void   setHasUpdated(bool value);



    #ifdef Parallel
    /**
     * @return The rank of the sender of an object. It only make ssense to call
     *         this routine after you've invoked receive with MPI_ANY_SOURCE.
     */
    int getSenderRank() const;
    
    /**
     * To be called prior to any MPI usage of this class.
     */
    static void initDatatype();
    static void shutdownDatatype();
            
    /**
     * In DaStGen (the first version), I had a non-static version of the send
     * as well as the receive. However, this did not work with newer C++11 
     * versions, as a member function using this as pointer usually doesn't 
     * see the vtable while the init sees the object from outside, i.e. 
     * including a vtable. So this routine now is basically an alias for a
     * blocking MPI_Send. 
     */
    static void send(const project::base_2d_euler::celldata::euler2DCellLabel& buffer, int destination, int tag, MPI_Comm communicator );
    static void receive(project::base_2d_euler::celldata::euler2DCellLabel& buffer, int source, int tag, MPI_Comm communicator );

    /**
     * Alternative to the other send() where I trigger a non-blocking send an 
     * then invoke the functor until the corresponding MPI_Test tells me that 
     * the message went through. In systems with heavy MPI usage, this can 
     * help to avoid deadlocks.
     */
    static void send(const project::base_2d_euler::celldata::euler2DCellLabel& buffer, int destination, int tag, std::function<void()> waitFunctor, MPI_Comm communicator );
    static void receive(project::base_2d_euler::celldata::euler2DCellLabel& buffer, int source, int tag, std::function<void()> waitFunctor, MPI_Comm communicator );
    #endif


#ifdef Parallel
    static void sendAndPollDanglingMessages(const project::base_2d_euler::celldata::euler2DCellLabel& message, int destination, int tag, MPI_Comm communicator=tarch::mpi::Rank::getInstance().getCommunicator());
    static void receiveAndPollDanglingMessages(project::base_2d_euler::celldata::euler2DCellLabel& message, int source, int tag, MPI_Comm communicator=tarch::mpi::Rank::getInstance().getCommunicator() );
#endif
    
    void merge(const project::base_2d_euler::celldata::euler2DCellLabel& neighbour, const peano4::datamanagement::CellMarker& marker);

    static bool receiveAndMerge(const peano4::datamanagement::CellMarker& marker);
    static bool send(const peano4::datamanagement::CellMarker& marker);
    static bool storePersistently(const peano4::datamanagement::CellMarker& marker);
    static bool loadPersistently(const peano4::datamanagement::CellMarker& marker);


    std::string toString() const;
  
  private:
    tarch::la::Vector<Dimensions,double>   _debugX;
    tarch::la::Vector<Dimensions,double>   _debugH;
    int   _SemaphoreNumber;
    double   _TimeStamp;
    double   _TimeStepSize;
    bool   _HasUpdated;



    #ifdef Parallel
    public:
      static MPI_Datatype  Datatype;
    private:
    int                  _senderDestinationRank;
    #endif



    
};

#endif
  
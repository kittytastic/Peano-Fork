
from typing import List, Optional, Tuple
from jinja2 import Template
from enum import Enum
import re
import os

class AttrTypes(Enum):
    SINGLE = 1
    LIST = 2
    LOL = 3

CFG_Attribute = Tuple[str, AttrTypes, str]
CFG_Name_Att =  Tuple[str, List[CFG_Attribute]]

def parse_cfg_attribute(attr: str)->Optional[CFG_Attribute]:
    att = ""
    att_type:str = ""

   

    p = re.split(r'(\*{1,2})+', attr)
    tail: Optional[str] = None
    if len(p)==1:
        if ":" in p[0]:
            x = p[0].split(":")
            assert(len(x)==2)
            att = x[0]
            tail = x[1]
        else:
            att = p[0]
    elif len(p)==3:
        tail=p[2].strip(":")
        att=p[0]
    else:
        return None

    att_type = tail if tail else "Any"

    stars = attr.count("*")
    if stars == 0:
        a_type = AttrTypes.SINGLE
    elif stars == 1:
        a_type = AttrTypes.LIST
        att_type = f"List[{att_type}]"
    elif stars == 2:
        a_type = AttrTypes.LOL
        att_type = f"List[List[{att_type}]]"
    else:
        return None
    return (att, a_type, att_type)
    
'''
Taken from pycparser
'''
def parse_cfgfile(filename:str)->List[CFG_Name_Att]:
    out_l:List[CFG_Name_Att] = []
    with open(filename, "r") as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            colon_i = line.find(':')
            lbracket_i = line.find('[')
            rbracket_i = line.find(']')
            if colon_i < 1 or lbracket_i <= colon_i or rbracket_i <= lbracket_i:
                raise RuntimeError("Invalid line in %s:\n%s\n" % (filename, line))

            name = line[:colon_i]
            val = line[lbracket_i + 1:rbracket_i]
            vallist = [parse_cfg_attribute(v.strip()) for v in val.split(',')] if val else []
            vallist_clean:List[CFG_Attribute] = []
            for v in vallist:
                if v is None:
                    raise RuntimeError("Invalid line in %s:\n%s\n" % (filename, line))
                vallist_clean.append(v)

            out_l.append((name, vallist_clean))

    return out_l

AST_NODE_TEMPLATE =  """
#########################################################
# WARNING: autogenerated file, any changes will be lost #
# file can be rebuilt with: python build_ast.py         #
#########################################################

from typing import Any, List #type: ignore
from compute_graph.AST.ast_node_base import AST_Node

Expr = AST_Node

{% for node in cfg_nodes%}
class AST_{{node[0]}}(AST_Node):
    def __init__(self{%+ if node[1]|length>0 %}, {% endif %}
    {%-for attr in node[1]-%}{{attr[0]}}:{{attr[2]}}{%- if loop.last -%}{%- else -%}, {%endif%}{% endfor %}):
        {% for attr in node[1]-%}
        self.{{attr[0]}} = {{attr[0]}}
        {% endfor %}
{% endfor %}"""


AST_TRANSFORM_TEMPLATE =  """
#########################################################
# WARNING: autogenerated file, any changes will be lost #
# file can be rebuilt with: python build_ast.py         #
#########################################################

from typing import Any, List #type: ignore
from abc import ABC, abstractmethod

class AST_Transformer(ABC):
    {%- for node in cfg_nodes%}
    @abstractmethod
    def visit_{{node[0]}}(self, node: Any)->Any:
        pass
    {% endfor %}
"""

def build_ast(cfg_nodes: List[CFG_Name_Att], node_filename:str="ast_nodes_g.py", tf_filename:str="transformer_g.py"):

    data = {
        "cfg_nodes": cfg_nodes,
    }

    node_template = Template(AST_NODE_TEMPLATE)

    node_outpath = os.path.join(os.path.dirname(os.path.abspath(__file__)), node_filename)
    print(node_outpath)

    with open(node_outpath, "w+") as f:
        f.write(node_template.render(data))

    
    tf_template = Template(AST_TRANSFORM_TEMPLATE)
    tf_outpath = os.path.join(os.path.dirname(os.path.abspath(__file__)), tf_filename)
    with open(tf_outpath, "w+") as f:
        f.write(tf_template.render(data))




if __name__=="__main__":
    print("Building AST")
    in_l = list(parse_cfgfile("./_ast.cfg"))
    build_ast(in_l)
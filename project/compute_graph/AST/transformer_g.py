
#########################################################
# WARNING: autogenerated file, any changes will be lost #
# file can be rebuilt with: python build_ast.py         #
#########################################################

from typing import Any, List #type: ignore
from abc import ABC, abstractmethod

class AST_Transformer(ABC):
    @abstractmethod
    def visit_Compound(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_Assign(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_Add(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_Sub(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_Mul(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_SIMD_Add(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_SIMD_Sub(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_SIMD_Mul(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_SIMD_FMA(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_GetArray(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_DecDoubleArray(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_DecVariable(self, node: Any)->Any:
        pass
    
    @abstractmethod
    def visit_GetVariable(self, node: Any)->Any:
        pass
    
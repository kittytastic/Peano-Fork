
#########################################################
# WARNING: autogenerated file, any changes will be lost #
# file can be rebuilt with: python build_ast.py         #
#########################################################

from typing import Any, List #type: ignore
from ast_node_base import AST_Node

Expr = AST_Node


class Assign(AST_Node):
    def __init__(self, lvalue:Expr, rvalue:Expr):
        self.lvalue = lvalue
        self.rvalue = rvalue
        

class Add(AST_Node):
    def __init__(self, lvalue:Expr, rvalue:Expr):
        self.lvalue = lvalue
        self.rvalue = rvalue
        

class Sub(AST_Node):
    def __init__(self, lvalue:Expr, rvalue:Expr):
        self.lvalue = lvalue
        self.rvalue = rvalue
        

class Mul(AST_Node):
    def __init__(self, lvalue:Expr, rvalue:Expr):
        self.lvalue = lvalue
        self.rvalue = rvalue
        

class SIMD_Add(AST_Node):
    def __init__(self, l_addr: int, r_addr: int, vector_length:int):
        self.l_addr = l_addr
        self.r_addr = r_addr
        self.vector_length = vector_length
        

class SIMD_Sub(AST_Node):
    def __init__(self, l_addr: int, r_addr: int, vector_length:int):
        self.l_addr = l_addr
        self.r_addr = r_addr
        self.vector_length = vector_length
        

class SIMD_Mul(AST_Node):
    def __init__(self, l_addr: int, r_addr: int, vector_length:int):
        self.l_addr = l_addr
        self.r_addr = r_addr
        self.vector_length = vector_length
        

class SIMD_FMA(AST_Node):
    def __init__(self, l_addr: int, r_addr: int, vector_length:int):
        self.l_addr = l_addr
        self.r_addr = r_addr
        self.vector_length = vector_length
        

class GetArray(AST_Node):
    def __init__(self, addr:int):
        self.addr = addr
        

class DecDoubleArray(AST_Node):
    def __init__(self, size:int):
        self.size = size
        

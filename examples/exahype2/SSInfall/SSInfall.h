//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef _examples_exahype2_SSInfall_SSInfall_H_
#define _examples_exahype2_SSInfall_SSInfall_H_

#include "AbstractSSInfall.h"
#include "tarch/logging/Log.h"

namespace examples {namespace exahype2 {namespace SSInfall {
  class SSInfall;

}}}


class examples::exahype2::SSInfall::SSInfall: public AbstractSSInfall {
  private:
    static tarch::logging::Log   _log;

  public:
    double m_tot=0;
    double r_s[1]={2};
    double t_record=0.0;

    ::exahype2::RefinementCommand refinementCriterion(
      const double * __restrict__ Q, // Q[5+0],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    ) override;
    


    
    void initialCondition(
      double * __restrict__ Q,
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      bool                                         gridIsConstructred
    ) override;
    


    
    void sourceTerm(
      const double * __restrict__ Q,
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      double                                       dt,
      double * __restrict__ S
    ) override;
    

    
    
    virtual void boundaryConditions(
      const double * __restrict__ Qinside, // Qinside[5+0]
      double * __restrict__ Qoutside, // Qoutside[5+0]
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    )  override;
    


    
    double maxEigenvalue(
      const double * __restrict__ Q, // Q[5+0],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    ) override;

      
    


    
    void flux(
      const double * __restrict__ Q, // Q[5+0],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double * __restrict__ F // F[5]
    ) override;

    void add_mass(
      const double r_coor,
      const double rho,
      const double size
    );  
    


    
};


#endif

//
// Peano4 data file
// Generated by Peano's Python API
// www.peano-framework.org
// This is generated. Be careful with adding your own stuff
//
#ifndef _EXAMPLES_EXAHYPE2_ACOUSTICS_OBSERVERS_DATAREPOSITORY_
#define _EXAMPLES_EXAHYPE2_ACOUSTICS_OBSERVERS_DATAREPOSITORY_



#include "peano4/stacks/STDVectorStack.h"    
#include "celldata/AcousticsQ.h"


#include "peano4/stacks/STDVectorStack.h"    
#include "facedata/AcousticsQ.h"


#include "peano4/stacks/STDVectorStack.h"    
#include "facedata/AcousticsQNew.h"

#include "peano4/stacks/STDVectorStack.h" 
             #include "facedata/Label.h"



#include <utility>
#include "peano4/datamanagement/FaceEnumerator.h"
#include "peano4/datamanagement/VertexEnumerator.h"
#include "peano4/maps/HierarchicalStackMap.h"
#include "peano4/maps/STDStackMap.h"

namespace examples{
namespace exahype2{
namespace acoustics{
namespace observers{

  class DataRepository;
}
}
}
}



class examples::exahype2::acoustics::observers::DataRepository {
  public:
	/**
	 * To look up the right stack, we use a combination of tree number (id) and
	 * stack number.
	 */
	typedef std::pair<int,int>  DataKey;
	
	

    static peano4::maps::HierarchicalStackMap< peano4::stacks::STDVectorStack< examples::exahype2::acoustics::celldata::AcousticsQ >>  _CellDataAcousticsQStack;
static peano4::maps::HierarchicalStackMap< peano4::stacks::STDVectorStack< examples::exahype2::acoustics::facedata::AcousticsQ >>  _FaceDataAcousticsQStack;
static peano4::maps::HierarchicalStackMap< peano4::stacks::STDVectorStack< examples::exahype2::acoustics::facedata::AcousticsQNew >>  _FaceDataAcousticsQNewStack;
static peano4::maps::HierarchicalStackMap< peano4::stacks::STDVectorStack< examples::exahype2::acoustics::facedata::Label >>  _FaceDataLabelStack;

    
    /**
     * Init all the MPI datatypes
     */
    static void initDatatypes();
    
    /**
     * Shutdown the MPI datatypes and free the local data containers.
     */
    static void shutdownDatatypes();
};


#endif

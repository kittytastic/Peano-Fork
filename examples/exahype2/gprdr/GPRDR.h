//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef _examples_exahype2_gprdr_GPRDR_H_
#define _examples_exahype2_gprdr_GPRDR_H_


#include "AbstractGPRDR.h"

#include "tarch/logging/Log.h"

namespace examples {namespace exahype2 {namespace gprdr {
  class GPRDR;

}}}



class examples::exahype2::gprdr::GPRDR: public AbstractGPRDR {
  private:
    static tarch::logging::Log   _log;

  public:
    


    
    void adjustSolution(
      double * __restrict__ Q, // Q[27+3],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    )  override;
    


    
    virtual double maxEigenvalue(
      double * __restrict__ Q, // Q[27+3],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    ) override;

    
    void flux(
      double * __restrict__ Q, // Q[27+3],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double * __restrict__ F // F[27]
    ) override;
    

    
    void nonconservativeProduct(
      double * __restrict__ Q, // Q[27+3],
      double                                       gradQ[27+3][Dimensions],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double * __restrict__ BgradQ // BgradQ[27]
    ) override;
    
};


#endif

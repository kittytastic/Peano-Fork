//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#pragma once

#include "AbstractLOH1OnGPU.h"

#include "tarch/logging/Log.h"


namespace examples{
namespace exahype2{
namespace loh1{
  class LOH1OnGPU;
}}}



class examples::exahype2::loh1::LOH1OnGPU: public examples::exahype2::loh1::AbstractLOH1OnGPU {
  private:
    static tarch::logging::Log   _log;


  public:
    #if defined(OpenMPGPUOffloading)
    #pragma omp declare target
    #endif
    virtual void adjustSolution(
      double * __restrict__                        Q, // [9+4],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      double                                       dt
    )  override;
    #if defined(OpenMPGPUOffloading)
    #pragma omp end declare target
    #endif

    #if defined(OpenMPGPUOffloading)
    #pragma omp declare target
    #endif
    static double maxEigenvalue(
      const double * __restrict__                  Q, // [9+4],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    );
    #if defined(OpenMPGPUOffloading)
    #pragma omp end declare target
    #endif

    #if defined(OpenMPGPUOffloading)
    #pragma omp declare target
    #endif
    virtual void boundaryConditions(
      const double* __restrict__                   Qinside, // [13]
      double* __restrict__                         Qoutside, // [13]
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    ) override;
    #if defined(OpenMPGPUOffloading)
    #pragma omp end declare target
    #endif

    #if defined(OpenMPGPUOffloading)
    #pragma omp declare target
    #endif
    static void nonconservativeProduct(
      const double * __restrict__                  Q, // [9+4],
      const double * __restrict__                  deltaQ, // [9+4],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double * __restrict__ BgradQ // BgradQ[13]
     );
    #if defined(OpenMPGPUOffloading)
    #pragma omp end declare target
    #endif
    
    // Dummy function
    #if defined(OpenMPGPUOffloading)
    #pragma omp declare target
    #endif
    static void flux(
      const double * __restrict__                  Q, // [9+4],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double * __restrict__ F // BgradQ[13]
     ) {};
    #if defined(OpenMPGPUOffloading)
    #pragma omp end declare target
    #endif

};

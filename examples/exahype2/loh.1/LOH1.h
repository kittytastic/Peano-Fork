//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef _EXAMPLES_EXAHYPE2_FINITEVOLUMES_LOH1_
#define _EXAMPLES_EXAHYPE2_FINITEVOLUMES_LOH1_


#include "AbstractLOH1.h"

#include "tarch/logging/Log.h"


namespace examples{
namespace exahype2{
namespace finitevolumes{

  class LOH1;
}
}
}



class examples::exahype2::finitevolumes::LOH1: public AbstractLOH1 {
  private:
    static tarch::logging::Log   _log;
    
    static constexpr int Unknowns = 13;
    
    struct VariablesShortcuts {
      const int v = 0; 
      const int sigma = 3;
      const int rho = 9;
      const int cp = 10;
      const int cs = 11;
      const int alpha = 12;
    } s;

    void prescribeGaussianWave(
        const tarch::la::Vector<Dimensions,double>&  x,
    		double Q[]);

  public:
    /**
     * @param Q Vector of unknowns
     * @param x Position of unknowns (finite volume centre)
     * @param h Mesh size of finite volume
     * @param t Time
     */
    ::exahype2::RefinementCommand refinementCriterion(
      double Q[13],
      const tarch::la::Vector<Dimensions,double>&  x,
      const tarch::la::Vector<Dimensions,double>&  h,
      double                                       t
    ) override;

    void adjustSolution(
      double Q[13],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    ) override;

    void eigenvalues(
      double                                       Q[13],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double                                       lambda[13]
    ) override;

    void boundaryConditions(
      double                                       Qinside[13],
      double                                       Qoutside[13],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    ) override;

    void  flux(
      double                                       Q[13],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double                                       F[13]
    ) override;

    void nonconservativeProduct(
      double                                       Q[13],
      double                                       gradQ[13][Dimensions],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double                                       BgradQ[13]
     ) override;

};


#endif

//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef _examples_exahype2_loh1_LOH1_H_
#define _examples_exahype2_loh1_LOH1_H_


#include "AbstractLOH1.h"

#include "tarch/logging/Log.h"

namespace examples {namespace exahype2 {namespace loh1 {
  class LOH1;

}}}



class examples::exahype2::loh1::LOH1: public AbstractLOH1 {
  private:
    static tarch::logging::Log   _log;

  public:
    ::exahype2::RefinementCommand refinementCriterion(
      double                                       Q[9+4],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    )  override;

    void adjustSolution(
  double * __restrict__ Q,
      double                                       Q[9+4],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    )  override;

    virtual double maxEigenvalue(
      double                                       Q[9+4],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    )  override;

    virtual void boundaryConditions(
      double                                       Qinside[9+4],
      double                                       Qoutside[9+4],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    )  override;


    

    
    void nonconservativeProduct(
      double                                       Q[9+4],
      const double                                       gradQ[9+4][Dimensions],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double                                       BgradQ[9]
    ) override;
    
};


#endif
//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. Don't change it! Every rerun of the Python API will
// overwrite your changes.
//
#ifndef _examples_exahype2_loh1_AbstractLOH1_H_
#define _examples_exahype2_loh1_AbstractLOH1_H_


#include "exahype2/RefinementControl.h"

#include "tarch/la/Vector.h"

#include "peano4/utils/Globals.h"




namespace examples {namespace exahype2 {namespace loh1 {
  class AbstractLOH1;

}}}



class examples::exahype2::loh1::AbstractLOH1 {
  public:
    enum class SolverState {
      GridConstruction,
      GridInitialisation,
      Primary,
      Secondary,
      PlottingInitialCondition,
      PrimaryAfterGridInitialisation,
      Plotting
    };

    static std::string toString(SolverState);

    AbstractLOH1();

    double getMinTimeStamp() const;
    double getMaxTimeStamp() const;
    double getMinTimeStepSize() const;
    double getMaxTimeStepSize() const;

    SolverState  getSolverState() const;

    /**
     * @param Q Vector of unknowns
     * @param t Time
     */
    virtual ::exahype2::RefinementCommand refinementCriterion(
      double                                       Q[9+4],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    ) = 0;

    /**
     * Feel free to change the solution in the particular finite volume.
     * You can for example change the initial conditions by overwriting
     * the solution for t=0. You may change Q. All other parameters are
     * in.
     */
    virtual void adjustSolution(
      double                                       Q[9+4],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    ) = 0;

    /**
     * Determine max eigenvalue over Jacobian in a given point with solution values
     * (states) Q. All parameters are in.
     */
    virtual double maxEigenvalue(
      double                                       Q[9+4],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    ) = 0;

    /**
     * Apply boundary conditions. You can overwrite both the inside and
     * outside values though most BCs only modify the outside ones. Please
     * note that the boundary conditions you set here are after that subject
     * to the Riemann solver, i.e. flux and eigenvalues.
     */
    virtual void boundaryConditions(
      double                                       Qinside[9+4],
      double                                       Qoutside[9+4],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    ) = 0;


    virtual void startGridConstructionStep();
    virtual void finishGridConstructionStep();

    virtual void startGridInitialisationStep();
    virtual void finishGridInitialisationStep();

    /**
     * If you hook into this routine, ensure the abstract base class
     * operation is still invoked.
     */
    virtual void startTimeStep(
      double globalMinTimeStamp,
      double globalMaxTimeStamp,
      double globalMinTimeStepSize,
      double globalMaxTimeStepSize
    );

    /**
     * If you hook into this routine, ensure the abstract base class
     * operation is still invoked.
     */
    virtual void finishTimeStep();

    virtual void startPlottingStep(
      double globalMinTimeStamp,
      double globalMaxTimeStamp,
      double globalMinTimeStepSize,
      double globalMaxTimeStepSize
    );

    virtual void finishPlottingStep();

    
     
    virtual void nonconservativeProduct(
      double                                       Q[9+4],
      double                                       gradQ[9+4][Dimensions],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double                                       BgradQ[9]
    ) =0;
     

    double getMaxMeshSize() const;
    double getMinMeshSize() const;

  protected:
    static tarch::logging::Log  _log;

    const int  _NumberOfFiniteVolumesPerAxisPerPatch;

    double     _timeStamp;

    SolverState  _solverState;

    double     _maxH;
    double     _minH;
};


#endif
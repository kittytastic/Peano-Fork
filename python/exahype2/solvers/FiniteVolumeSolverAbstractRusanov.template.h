//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef _{INCLUDE_GUARD}_
#define _{INCLUDE_GUARD}_


#include "exahype2/RefinementControl.h"

#include "tarch/la/Vector.h"

#include "peano4/utils/Globals.h"



{OPEN_NAMESPACE}
  class {CLASSNAME};
{CLOSE_NAMESPACE}


class {FULL_QUALIFIED_CLASSNAME} {{
  public:
    /**
     * @param Q Vector of unknowns
     * @param t Time
     */
    virtual ::exahype2::RefinementCommand refinementCriterion(
      double Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t
    ) = 0;

    virtual void adjustSolution(
      double Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t
    ) = 0;

    virtual void eigenvalues(
      double                                       Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
	  int                                          normal,
      double                                       lambda[{NUMBER_OF_UNKNOWNS}]
    ) = 0;

    virtual void flux(
      double                                       Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
      int                                          normal,
      double                                       F[{NUMBER_OF_UNKNOWNS}]
    ) = 0;
}};


#endif

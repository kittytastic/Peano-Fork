//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef {% for item in NAMESPACE -%}_{{ item }}{%- endfor %}_{{CLASSNAME}}_H_
#define {% for item in NAMESPACE -%}_{{ item }}{%- endfor %}_{{CLASSNAME}}_H_


#include "Abstract{{CLASSNAME}}.h"

#include "tarch/logging/Log.h"

{% for item in NAMESPACE -%}
  namespace {{ item }} {

{%- endfor %}
  class {{CLASSNAME}};

{% for item in NAMESPACE -%}
  }
{%- endfor %}



class {% for item in NAMESPACE -%}{{ item }}::{%- endfor %}{{CLASSNAME}}: public Abstract{{CLASSNAME}} {
  private:
    static tarch::logging::Log   _log;

  public:
    /**
     * @param Q Vector of unknowns
     * @param x Position of unknowns (finite volume centre)
     * @param h Mesh size of finite volume
     * @param t Time
     */
    ::exahype2::RefinementCommand refinementCriterion(
      double                                       Q[{{NUMBER_OF_UNKNOWNS}}],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    ) override;

    void adjustSolution(
      double                                       Q[{{NUMBER_OF_UNKNOWNS}}],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t
    ) override;

    void eigenvalues(
      double                                       Q[{{NUMBER_OF_UNKNOWNS}}],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double                                       lambda[{{NUMBER_OF_UNKNOWNS}}]
    ) override;

    void boundaryConditions(
      double                                       Qinside[{{NUMBER_OF_UNKNOWNS}}],
      double                                       Qoutside[{{NUMBER_OF_UNKNOWNS}}],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal
    ) override;

    {% for item in CALLBACKS -%}
      {% if item=="flux" %}
   void flux(
     double                                       Q[{{NUMBER_OF_UNKNOWNS}}],
     const tarch::la::Vector<Dimensions,double>&  faceCentre,
     const tarch::la::Vector<Dimensions,double>&  volumeH,
     double                                       t,
     int                                          normal,
     double                                       F[{{NUMBER_OF_UNKNOWNS}}]
    ) override;
      {% endif %}
      {% if item=="ncp" %}
    void nonconservativeProduct(
      double                                       Q[{{NUMBER_OF_UNKNOWNS}}],
      double                                       gradQ[{{NUMBER_OF_UNKNOWNS}}][Dimensions],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      double                                       t,
      int                                          normal,
      double                                       F[{{NUMBER_OF_UNKNOWNS}}]
    ) override;
      {% endif %}
    {%- endfor %}
};


#endif

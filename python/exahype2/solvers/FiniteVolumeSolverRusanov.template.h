//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef _{INCLUDE_GUARD}_
#define _{INCLUDE_GUARD}_


#include "Abstract{CLASSNAME}.h"

#include "tarch/logging/Log.h"


{OPEN_NAMESPACE}
  class {CLASSNAME};
{CLOSE_NAMESPACE}


class {FULL_QUALIFIED_CLASSNAME}: public Abstract{CLASSNAME} {{
  private:
    static tarch::logging::Log   _log;

  public:
    /**
     * @param Q Vector of unknowns
     * @param x Position of unknowns (finite volume centre)
     * @param h Mesh size of finite volume
     * @param t Time
     */
    ::exahype2::RefinementCommand refinementCriterion(
      double Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  x,
      const tarch::la::Vector<Dimensions,double>&  h,
      const tarch::la::Vector<Dimensions,double>&  t
    ) override;

    void adjustSolution(
      double Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t
    ) override;

    void eigenvalues(
      double                                       Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
	  int                                          normal,
      double                                       lambda[{NUMBER_OF_UNKNOWNS}]
    ) override;

    void flux(
      double                                       Q[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
      int                                          normal,
      double                                       F[{NUMBER_OF_UNKNOWNS}]
    ) override;

    void boundaryConditions(
      double                                       Qinside[{NUMBER_OF_UNKNOWNS}],
      double                                       Qoutside[{NUMBER_OF_UNKNOWNS}],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
      int                                          normal
    ) override;
}};


#endif

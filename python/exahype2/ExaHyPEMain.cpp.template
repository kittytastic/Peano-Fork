#include "{MAIN_NAME}.h"
#include "Constants.h"

#include "tarch/logging/Log.h"

#include "tarch/multicore/multicore.h"

#include "peano4/peano.h"
#include "peano4/grid/Spacetree.h"
#include "peano4/parallel/SpacetreeSet.h"

#include "observers/DataRepository.h"
#include "observers/StepRepository.h"
#include "observers/SolverRepository.h"

#include "observers/CreateGrid.h"
#include "observers/PlotSolution.h"
#include "observers/TimeStep.h"

#include "peano4/UnitTests.h"
#include "tarch/UnitTests.h"

#include "exahype2/NonCriticalAssertions.h"
#include "exahype2/UserInterface.h"



using namespace {FULL_NAMESPACE};



tarch::logging::Log _log("::");



/**
 * @return continues to run
 */
bool selectNextAlgorithmicStep() {{
  static bool   gridConstructed   = false;
  static double nextPlotTimeStamp = FirstPlotTimeStamp;
  static bool   haveJustWrittenSnapshot = false;
  static bool   haveReceivedNoncriticialAssertion = false;
  bool          continueToSolve   = true;

  if (exahype2::hasNonCriticalAssertionBeenViolated() and not haveReceivedNoncriticialAssertion) {{
    peano4::parallel::Node::getInstance().setNextProgramStep(
      observers::StepRepository::toProgramStep( observers::StepRepository::Steps::PlotSolution )
    );
    continueToSolve = true;
    haveReceivedNoncriticialAssertion = true;
    logError( "selectNextAlgorithmicStep()", "noncritical assertion has been triggered in code. Dump final state and terminate" );
  }}
  else if (exahype2::hasNonCriticalAssertionBeenViolated()) {{
    continueToSolve = false;
  }}
  else if (not gridConstructed) {{
    peano4::parallel::Node::getInstance().setNextProgramStep(
      observers::StepRepository::toProgramStep( observers::StepRepository::Steps::CreateGrid )
    );
    if ( peano4::parallel::SpacetreeSet::getInstance().getGridStatistics().getStationarySweeps()>=5 ) {{
      assertionNumericalEquals( observers::getMinTimeStamp(), 0.0 );
      gridConstructed = true;
    }}
    continueToSolve = true;
  }}
  else {{
    if ( observers::getMinTimeStamp()>=nextPlotTimeStamp  and TimeInBetweenPlots>0.0 ) {{
      nextPlotTimeStamp += TimeInBetweenPlots;
      if ( nextPlotTimeStamp < observers::getMinTimeStamp() ) {{
        logWarning( "selectNextAlgorithmicStep()", "code is asked to plot every dt=" << TimeInBetweenPlots << ", but this seems to be less than the minimal time step size of the solvers" );
        nextPlotTimeStamp = observers::getMinTimeStamp() + TimeInBetweenPlots;
        logWarning( "selectNextAlgorithmicStep()", "plot solution at t=" << observers::getMinTimeStamp() << ", but next plot will be due at t=" << nextPlotTimeStamp );
      }}
      peano4::parallel::Node::getInstance().setNextProgramStep(
        observers::StepRepository::toProgramStep( observers::StepRepository::Steps::PlotSolution )
      );
      haveJustWrittenSnapshot = true;
      continueToSolve         = true;
    }}
    else if ( observers::getMinTimeStamp()<TerminalTime ) {{
      peano4::parallel::Node::getInstance().setNextProgramStep(
        observers::StepRepository::toProgramStep( observers::StepRepository::Steps::TimeStep )
      );
      continueToSolve         = true;
      haveJustWrittenSnapshot = false;
    }}
    else {{
      if (not haveJustWrittenSnapshot and TimeInBetweenPlots>0.0) {{
        peano4::parallel::Node::getInstance().setNextProgramStep(
          observers::StepRepository::toProgramStep( observers::StepRepository::Steps::PlotSolution )
        );
        continueToSolve         = true; // don't want to terminate immediately
        haveJustWrittenSnapshot = true;
        nextPlotTimeStamp       = std::numeric_limits<double>::max();
      }}
      else {{
        continueToSolve = false;
      }}
    }}
  }}
  
  return continueToSolve;
}}


void step() {{
  int  stepIdentifier = peano4::parallel::Node::getInstance().getCurrentProgramStep();
  auto stepName       = observers::StepRepository::toStepEnum(stepIdentifier);

  static tarch::logging::Log _log("");
  logInfo( "step()", "run " << observers::StepRepository::toString(stepName) );

  switch ( stepName ) {{
    case observers::StepRepository::Steps::CreateGrid:
      {{
        observers::CreateGrid  observer;
        peano4::parallel::SpacetreeSet::getInstance().traverse(observer);
        observers::finishGridConstructionStep();
      }}
      break;
    case observers::StepRepository::Steps::PlotSolution:
      {{
        observers::PlotSolution  observer;
        peano4::parallel::SpacetreeSet::getInstance().traverse(observer);
      }}
      break;
    case observers::StepRepository::Steps::TimeStep:
      {{
        const double minTimeStamp    = observers::getMinTimeStamp();
        const double maxTimeStamp    = observers::getMaxTimeStamp();
        const double minTimeStepSize = observers::getMinTimeStepSize();
        const double maxTimeStepSize = observers::getMaxTimeStepSize();

        if ( tarch::mpi::Rank::getInstance().isGlobalMaster() ) {{
          logInfo( "step()", "t_{{min}}  = " << minTimeStamp );
          logInfo( "step()", "t_{{max}}  = " << maxTimeStamp );
          logInfo( "step()", "dt_{{min}} = " << minTimeStepSize );
          logInfo( "step()", "dt_{{max}} = " << maxTimeStepSize );
        }}
        observers::startTimeStep( minTimeStamp, maxTimeStamp, minTimeStepSize, maxTimeStepSize );
        observers::TimeStep  observer;
        peano4::parallel::SpacetreeSet::getInstance().traverse(observer);
        observers::finishTimeStep();
      }}
      break;
  }}
}}




  
  
int main(int argc, char** argv) {{
  const int ExitCodeSuccess          = 0;
  const int ExitCodeUnitTestsFailed  = 1;
  const int ExitCodeInvalidArguments = 2;
  
  peano4::initParallelEnvironment(&argc,&argv);
  exahype2::initNonCritialAssertionEnvironment();
  peano4::fillLookupTables();
  peano4::initSingletons(
    DomainOffset,
    DomainSize,
    0
  );

  if (not exahype2::parseCommandLineArguments(argc,argv) ) {{
    return ExitCodeInvalidArguments;
  }}
  
  {FULL_NAMESPACE}::observers::DataRepository::initDatatypes();

  peano4::parallel::Node::getInstance().init();
  
  #if PeanoDebug>=2
  tarch::tests::TestCase* peanoCoreTests = peano4::getUnitTests();
  peanoCoreTests->run();
  if (peanoCoreTests->getNumberOfErrors() != 0) {{
    logError("main()", "Peano4 core unit tests failed. Quit.");
    tarch::mpi::Rank::abort( ExitCodeUnitTestsFailed );
  }}
  delete peanoCoreTests;

  tarch::tests::TestCase* peanoTarchTests = tarch::getUnitTests();
  peanoTarchTests->run();
  if (peanoTarchTests->getNumberOfErrors() != 0) {{
    logError("main()", "technical architecture (tarch) unit tests failed. Quit.");
    tarch::mpi::Rank::abort( ExitCodeUnitTestsFailed );
  }}
  delete peanoTarchTests;
  #endif

  if (tarch::mpi::Rank::getInstance().isGlobalMaster() ) {{
    while ( selectNextAlgorithmicStep() ) {{
      step();
    }}
  }}
  else {{
    while (peano4::parallel::Node::getInstance().continueToRun()) {{
      step();
    }}
  }}

  observers::finishSimulation();

  peano4::shutdownSingletons();
  {FULL_NAMESPACE}::observers::DataRepository::shutdownDatatypes();
  exahype2::shutdownNonCritialAssertionEnvironment();
  peano4::shutdownParallelEnvironment();

  return ExitCodeSuccess;
}}

//
// ExaHyPE2 solver file
// Generated by Peano's Python API
// www.peano-framework.org
//
// This is generated. If you change fundamental properties, you will have to 
// generate this file. Backup your manual changes before you do so.
//
#ifndef _EXAMPLES_EXAHYPE2_FINITEVOLUMES_PARALLELEULER_
#define _EXAMPLES_EXAHYPE2_FINITEVOLUMES_PARALLELEULER_


#include "AbstractParallelEuler.h"

#include "tarch/logging/Log.h"

#include "toolbox/loadbalancing/RecursiveGuided.h"

namespace examples{
namespace exahype2{
namespace finitevolumes{

  class ParallelEuler;
}
}
}



class examples::exahype2::finitevolumes::ParallelEuler: public AbstractParallelEuler {
  private:
    static tarch::logging::Log   _log;

    toolbox::loadbalancing::RecursiveGuided _loadBalancer;
  public:
    /**
     * @param Q Vector of unknowns
     * @param x Position of unknowns (finite volume centre)
     * @param h Mesh size of finite volume
     * @param t Time
     */
    ::exahype2::RefinementCommand refinementCriterion(
      double Q[5],
      const tarch::la::Vector<Dimensions,double>&  x,
      const tarch::la::Vector<Dimensions,double>&  h,
      const tarch::la::Vector<Dimensions,double>&  t
    ) override;

    void adjustSolution(
      double Q[5],
      const tarch::la::Vector<Dimensions,double>&  volumeCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t
    ) override;

    void eigenvalues(
      double                                       Q[5],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
	  int                                            normal,
      double                                       lambda[5]
    ) override;

    void flux(
      double                                       Q[5],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
      int                                          normal,
      double                                       F[5]
    ) override;

    void boundaryConditions(
      double                                       Qinside[5],
      double                                       Qoutside[5],
      const tarch::la::Vector<Dimensions,double>&  faceCentre,
      const tarch::la::Vector<Dimensions,double>&  volumeH,
      const tarch::la::Vector<Dimensions,double>&  t,
      int                                          normal
    ) override;

    void finishTimeStep() override;

};


#endif

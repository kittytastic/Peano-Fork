//
// Peano4 data file
// Generated by Peano's Python API
// www.peano-framework.org
// This is generated. Be careful with adding your own stuff
//
#ifndef {% for item in NAMESPACE -%}_{{ item }}{%- endfor %}_{{CLASSNAME}}_H_
#define {% for item in NAMESPACE -%}_{{ item }}{%- endfor %}_{{CLASSNAME}}_H_


#include <vector>

#include "tarch/la/Vector.h"
#include "tarch/mpi/mpi.h"

#include "peano4/utils/Globals.h"

#include "peano4/datamanagement/VertexMarker.h"



{% for item in NAMESPACE -%}
  {% if not loop.last %}
  namespace {{ item }} {
  {% endif %}
{%- endfor %}

  namespace globaldata {
    class {{PARTICLE_TYPE}};
  }
{% for item in NAMESPACE -%}
  {% if not loop.last %}
  }
  {% endif %}
{%- endfor %}



{% for item in NAMESPACE -%}
  namespace {{ item }} {
{%- endfor %}


  class {{CLASSNAME}}: public std::vector< {% for item in NAMESPACE -%}{% if not loop.last %}{{ item }}::{% endif %}{%- endfor %}globaldata::{{PARTICLE_TYPE}}* > {
    #if PeanoDebug>=1
    private:
     tarch::la::Vector<Dimensions,double> _debugX;
     tarch::la::Vector<Dimensions,double> _debugH;

    public:
      void setDebugX( const tarch::la::Vector<Dimensions,double>& data );
      void setDebugH( const tarch::la::Vector<Dimensions,double>& data );
      tarch::la::Vector<Dimensions,double> getDebugX() const;
      tarch::la::Vector<Dimensions,double> getDebugH() const;
    #endif
    public:
      typedef {% for item in NAMESPACE -%}{% if not loop.last %}{{ item }}::{% endif %}{%- endfor %}globaldata::{{PARTICLE_TYPE}}  DoFType;

      void merge(const {{CLASSNAME}}& neighbour, const peano4::datamanagement::VertexMarker& marker);
      static bool send(const peano4::datamanagement::VertexMarker& marker);
      static bool receiveAndMerge(const peano4::datamanagement::VertexMarker& marker);
      static bool storePersistently(const peano4::datamanagement::VertexMarker& marker);
      static bool loadPersistently(const peano4::datamanagement::VertexMarker& marker);

      #ifdef Parallel
      static void initDatatype();

      static void shutdownDatatype();
      #endif

      std::string toString() const;

      double getMinCutOffRadius() const;
  };

{% for item in NAMESPACE -%}
}
{%- endfor %}


#endif

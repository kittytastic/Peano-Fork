// This file is part of the Peano project. For conditions of distribution and
// use, please see the copyright notice at www.peano-framework.org
#ifndef {INCLUDE_GUARD}
#define {INCLUDE_GUARD}


#include "tarch/la/Vector.h"
#include "peano4/utils/Globals.h"
#include "peano4/grid/GridControlEvent.h"
#include "peano4/grid/GridTraversalEvent.h"
#include "peano4/grid/TraversalObserver.h"


#include "DataRepository.h"


{INCLUDES}


{OPEN_NAMESPACE}
  class {CLASSNAME};
{CLOSE_NAMESPACE}


class {FULL_QUALIFIED_CLASSNAME}: public peano4::grid::TraversalObserver {{
  public:
    /**
     * Logging device
     */
    static tarch::logging::Log  _log;
  
    const int _spacetreeId;
    
{ATTRIBUTES}
    
  public:
    /**
     * If you pass this marker into the constructor, it implies that this 
     * observer is used as prototype for the real observers which are created
     * per local spacetree.
     */
    static constexpr int SpacetreePrototype = -1; 
  
    /**
     * @param spacetreeId -1 is the dummy, i.e. this observer is not 
     *                    instantiated for a spacetree yet but serves as 
     *                    blueprint for the real trees later on.
     */
    {CLASSNAME}(int spacetreeId = SpacetreePrototype);
    
	void enterCell(
      const peano4::grid::GridTraversalEvent&  event
    ) override;

	void leaveCell(
	  const peano4::grid::GridTraversalEvent&  event
    ) override;

	TraversalObserver* clone(int spacetreeId) override;

	std::vector< peano4::grid::GridControlEvent > getGridControlEvents() override;

    void beginTraversal(
      const tarch::la::Vector<Dimensions,double>&  x,
      const tarch::la::Vector<Dimensions,double>&  h
    ) override;

    void endTraversal(
      const tarch::la::Vector<Dimensions,double>&  x,
      const tarch::la::Vector<Dimensions,double>&  h
    ) override;
    
    void exchangeAllVerticalDataExchangeStacks( int masterId ) override;
    void exchangeAllHorizontalDataExchangeStacks( bool symmetricDataCardinality ) override;
    void exchangeAllPeriodicBoundaryDataStacks() override;
    void streamDataFromSplittingTreeToNewTree( int newWorker ) override;
    void streamDataFromJoiningTreeToMasterTree( int masterId ) override;
    void finishAllOutstandingSendsAndReceives() override;
}};

#endif
